{
  "language": "Solidity",
  "sources": {
    "contracts/coordinape-protocol/contracts/ApeProtocol/ApeAllowanceModule.sol": {
      "content": "pragma solidity ^0.8.2;\n\nabstract contract ApeAllowanceModule {\n\n\tstruct Allowance {\n\t\tuint256 maxAmount;\n\t\tuint256 maxInterval;\n\t\t//uint256 tapType; // 0 pure profit | 1 any | 2 shitcoins \n\t}\n\n\tstruct CurrentAllowance {\n\t\tuint256 debt;\n\t\tuint256 intervalStart;\n\t\tuint256 epochs;\n\t}\n\n\t// vault => circle => token => allowance\n\tmapping(address => mapping(bytes32 => mapping(address => Allowance))) public allowances;\n\tmapping(address => mapping(bytes32 => mapping(address => CurrentAllowance))) public currentAllowances;\n\n\tevent AllowanceUpdated(address vault, bytes32 circle, address token, uint256 amount, uint256 interval);\n\n\t// TODO add tap type checks\n\tfunction setAllowance(\n\t\tbytes32 _circle,\n\t\taddress _token,\n\t\tuint256 _amount,\n\t\tuint256 _interval,\n\t\tuint256 _epochs\n\t\t) external {\n\t\tallowances[msg.sender][_circle][_token] = Allowance({\n\t\t\tmaxAmount: _amount,\n\t\t\tmaxInterval: _interval\n\t\t});\n\n\t\tcurrentAllowances[msg.sender][_circle][_token] = CurrentAllowance({\n\t\t\tdebt: 0,\n\t\t\tintervalStart: block.timestamp,\n\t\t\tepochs: _epochs\n\t\t});\n\t\temit AllowanceUpdated(msg.sender, _circle, _token, _amount, _interval);\n\t}\n\n\tfunction _isTapAllowed(\n\t\taddress _vault,\n\t\tbytes32 _circle,\n\t\taddress _token,\n\t\tuint256 _amount\n\t\t) internal {\n\t\tAllowance memory allowance = allowances[_vault][_circle][_token];\n\t\tCurrentAllowance storage currentAllowance = currentAllowances[_vault][_circle][_token];\n\n\t\t_updateInterval(currentAllowance, allowance);\n\t\trequire(currentAllowance.debt + _amount <= allowance.maxAmount, \"Circle does not have sufficient allowance\");\n\t\tcurrentAllowance.debt += _amount;\n\t}\n\n\tfunction _updateInterval(CurrentAllowance storage _currentAllowance, Allowance memory _allowance) internal {\n\t\tuint256 elapsedTime = block.timestamp - _currentAllowance.intervalStart;\n\t\tif (elapsedTime > _allowance.maxInterval) {\n\t\t\trequire(_currentAllowance.epochs > 0, \"Circle cannot tap anymore\");\n\t\t\t_currentAllowance.debt = 0;\n\t\t\t_currentAllowance.intervalStart += _allowance.maxInterval * (elapsedTime / _allowance.maxInterval);\n\t\t\t_currentAllowance.epochs--;\n\t\t}\n\t}\n}"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVault.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../../interfaces/IApeVault.sol\";\nimport \"../ApeDistributor.sol\";\nimport \"../ApeAllowanceModule.sol\";\nimport \"../ApeRegistry.sol\";\nimport \"../FeeRegistry.sol\";\nimport \"../ApeRouter.sol\";\n\nimport \"./BaseWrapper.sol\";\n\ncontract ApeVaultWrapper is BaseWrapper, Ownable {\n\tusing SafeERC20 for VaultAPI;\n\tusing SafeERC20 for IERC20;\n\n\tuint256 constant TOTAL_SHARES = 10000;\n\t\n\tIERC20 public simpleToken;\n\n\tmapping(address => bool) public hasAccess;\n\n\tuint256 public underlyingValue;\n\taddress public apeRegistry;\n\tVaultAPI public vault;\n\tApeAllowanceModule public allowanceModule;\n\n\tconstructor(\n\t\taddress _apeRegistry,\n\t    address _token,\n        address _registry,\n\t\taddress _simpleToken) BaseWrapper(_token, _registry) {\n\t\tapeRegistry = _apeRegistry;\n\t\tif (_token != address(0))\n\t\t\tvault = VaultAPI(RegistryAPI(_registry).latestVault(_token));\n\t\tsimpleToken = IERC20(_simpleToken);\n\t}\n\n\tevent ApeVaultFundWithdrawal(address indexed apeVault, address vault, uint256 _amount, bool underlying);\n\n\tmodifier onlyDistributor() {\n\t\trequire(msg.sender == ApeRegistry(apeRegistry).distributor());\n\t\t_;\n\t}\n\n\tmodifier onlyRouter() {\n\t\trequire(msg.sender == ApeRegistry(apeRegistry).router());\n\t\t_;\n\t}\n\n\tfunction _shareValue(uint256 numShares) internal view returns (uint256) {\n\t\treturn vault.pricePerShare() * numShares / (10**uint256(vault.decimals()));\n    }\n\n    function _sharesForValue(uint256 amount) internal view returns (uint256) {\n\t\treturn amount * (10**uint256(vault.decimals())) / vault.pricePerShare();\n    }\n\n\t/**  \n\t * @notice\n\t * Used to measure profits made compared to funds send to the vault\n\t * Returns 0 if negative\n\t */\n\tfunction profit() public view returns(uint256) {\n\t\tuint256 totalValue = _shareValue(vault.balanceOf(address(this)));\n\t\tif (totalValue <= underlyingValue)\n\t\t\treturn 0;\n\t\telse\n\t\t\treturn totalValue - underlyingValue;\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to withdraw non yield bearing tokens\n\t * @param _amount Amount of simpleToken to withdraw\n\t */\n\tfunction apeWithdrawSimpleToken(uint256 _amount) public {\n\t\tsimpleToken.safeTransfer(msg.sender, _amount);\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to withdraw yield bearing token\n\t * @param _shareAmount Amount of yield bearing token to withdraw\n\t * @param _underlying boolean to know if we redeem shares or not\n\t */\n\tfunction apeWithdraw(uint256 _shareAmount, bool _underlying) external onlyOwner {\n\t\tuint256 underlyingAmount = _shareValue(_shareAmount);\n\t\trequire(underlyingAmount <= underlyingValue, \"underlying amount higher than vault value\");\n\n\t\taddress router = ApeRegistry(apeRegistry).router();\n\t\tunderlyingValue -= underlyingAmount;\n\t\tvault.transfer(router, _shareAmount);\n\t\tApeRouter(router).delegateWithdrawal(owner(), address(this), vault.token(), _shareAmount, _underlying);\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to withdraw all yield bearing token\n\t * @param _underlying boolean to know if we redeem shares or not\n\t */\n\tfunction exitVaultToken(bool _underlying) external onlyOwner {\n\t\tunderlyingValue = 0;\n\t\tuint256 totalShares = vault.balanceOf(address(this));\n\t\taddress router = ApeRegistry(apeRegistry).router();\n\t\tvault.transfer(router, totalShares);\n\t\tApeRouter(router).delegateWithdrawal(owner(), address(this), vault.token(), totalShares, _underlying);\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to migrate yearn vault\n\t */\n\tfunction apeMigrate() external onlyOwner returns(uint256 migrated){\n\t\tmigrated = _migrate(address(this));\n\t\tvault = VaultAPI(registry.latestVault(address(token)));\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to take funds from vault into the distributor (can only be called by distributor)\n\t * @param _value Amount of funds to take\n\t * @param _type The type of tap performed on the vault\n\t */\n\tfunction tap(uint256 _value, uint8 _type) external onlyDistributor returns(uint256) {\n\t\tif (_type == uint8(0)) {\n\t\t\t_tapOnlyProfit(_value, msg.sender);\n\t\t\treturn _value;\n\t\t}\n\t\telse if (_type == uint8(1)) {\n\t\t\t_tapBase(_value, msg.sender);\n\t\t\treturn _value;\n\t\t}\n\t\telse if (_type == uint8(2))\n\t\t\t_tapSimpleToken(_value, msg.sender);\n\t\treturn (0);\n\t}\n\n\n\t/**  \n\t * @notice\n\t * Used to take funds from vault purely from profit made from yearn yield\n\t * @param _tapValue Amount of funds to take\n\t * @param _recipient recipient of funds (always distributor)\n\t */\n\tfunction _tapOnlyProfit(uint256 _tapValue, address _recipient) internal {\n\t\tuint256 fee = FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).getVariableFee(_tapValue, _tapValue);\n\t\tuint256 finalTapValue = _tapValue + _tapValue * fee / TOTAL_SHARES;\n\t\trequire(_shareValue(finalTapValue) <= profit(), \"Not enough profit to cover epoch\");\n\t\tvault.safeTransfer(_recipient, _tapValue);\n\t\tvault.safeTransfer(ApeRegistry(apeRegistry).treasury(), _tapValue * fee / TOTAL_SHARES);\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to take funds from vault by deducting a part from profits\n\t * @param _tapValue Amount of funds to take\n\t * @param _recipient recipient of funds (always distributor)\n\t */\n\tfunction _tapBase(uint256 _tapValue, address _recipient) internal {\n\t\tuint256 underlyingTapValue = _shareValue(_tapValue);\n\t\tuint256 profit_ = profit();\n\t\tuint256 fee = FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).getVariableFee(profit_, underlyingTapValue);\n\t\tuint256 finalTapValue = underlyingTapValue + underlyingTapValue * fee / TOTAL_SHARES;\n\t\tif (finalTapValue > profit_)\n\t\t\tunderlyingValue -= finalTapValue - profit_;\n\t\tvault.transfer(_recipient, _tapValue);\n\t\tvault.transfer(ApeRegistry(apeRegistry).treasury(), _tapValue * fee / TOTAL_SHARES);\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to take funds simple token\n\t * @param _tapValue Amount of funds to take\n\t * @param _recipient recipient of funds (always distributor)\n\t */\n\tfunction _tapSimpleToken(uint256 _tapValue, address _recipient) internal {\n\t\tuint256 feeAmount = _tapValue * FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).staticFee() / TOTAL_SHARES;\n\t\tsimpleToken.transfer(_recipient, _tapValue);\n\t\tsimpleToken.transfer(ApeRegistry(apeRegistry).treasury(), feeAmount);\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to correct change the amount of underlying funds held by the ape Vault\n\t */\n\tfunction syncUnderlying() external onlyOwner {\n\t\tunderlyingValue = _shareValue(vault.balanceOf(address(this)));\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to add the correct amount of funds from the router, only callable by router\n\t * @param _amount amount of undelrying funds to add\n\t */\n\tfunction addFunds(uint256 _amount) external onlyRouter {\n\t\tunderlyingValue += _amount;\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to approve an admin to fund/finalise epochs from this vault to a specific circle\n\t * @param _circle Circle who will benefit from this vault\n\t * @param _admin address that can finalise epochs\n\t */\n\tfunction approveCircleAdmin(bytes32 _circle, address _admin) external onlyOwner {\n\t\tApeDistributor(ApeRegistry(apeRegistry).distributor()).updateCircleAdmin(_circle, _admin);\n\t}\n\n\t/**  \n\t * @notice\n\t * Used to update the allowance of a circle that the vault funds\n\t * @param _circle Circle who will benefit from this vault\n\t * @param _amount Max amount of funds available per epoch\n\t * @param _interval Seconds in between each epochs\n\t * @param _epochAmount Amount of epochs to fund (0 means you're at least funding one epoch)\n\t * If you want to stop funding a circle, set _amount to 0\n\t */\n\tfunction updateAllowance(\n\t\tbytes32 _circle,\n\t\taddress _token,\n\t\tuint256 _amount,\n\t\tuint256 _interval,\n\t\tuint256 _epochAmount\n\t\t) external onlyOwner {\n\t\tApeDistributor(\n\t\t\tApeRegistry(apeRegistry).distributor()\n\t\t).setAllowance(_circle, _token, _amount, _interval, _epochAmount);\n\t}\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/coordinape-protocol/interfaces/IApeVault.sol": {
      "content": "pragma solidity ^0.8.2;\n\ninterface IApeVault {\n\tfunction tap(uint256 _tapValue, uint256 _slippage, uint8 _type) external;\n}"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/ApeDistributor.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \nimport \"./wrapper/ApeVault.sol\";\nimport \"./ApeAllowanceModule.sol\";\nimport {VaultAPI} from \"./wrapper/BaseWrapper.sol\";\n\ncontract ApeDistributor is ApeAllowanceModule, Ownable {\n\tusing MerkleProof for bytes32[];\n\tusing SafeERC20 for IERC20;\n\n\n\t// address to approve admins for a circle\n\t// vault => circle => admin address\n\tmapping(address => mapping(bytes32 => address)) public vaultApprovals;\n\n\t// accepted tokens for given circle\n\t// circle => grant token => bool\n\t// mapping(address => mapping(address => bool)) public circleToken;\n\n\t// roots following this mapping:\n\t// circle address => token address => epoch ID => root\n\tmapping(bytes32 =>mapping(address => mapping(uint256 => bytes32))) public epochRoots;\n\tmapping(bytes32 =>mapping(address => uint256)) public epochTracking;\n\tmapping(bytes32 => mapping(address => mapping(uint256 => mapping(uint256 => uint256)))) public epochClaimBitMap;\n\n\tmapping(bytes32 => mapping(address => uint256)) public circleAlloc;\n\n\t// checkpoints following this mapping:\n\t// circle => token => address => checkpoint\n\tmapping(bytes32 => mapping(address => mapping(address => uint256))) public checkpoints;\n\n\tevent AdminApproved(address indexed vault, bytes32 indexed circle, address indexed admin);\n\n\tevent Claimed(bytes32 circle, address token, uint256 epoch, uint256 index, address account, uint256 amount);\n\n\tevent apeVaultFundsTapped(address indexed apeVault, address yearnVault, uint256 amount);\n\n\tfunction uploadEpochRoot(\n\t\taddress _vault,\n\t\tbytes32 _circle,\n\t\taddress _token,\n\t\tbytes32 _root,\n\t\tuint256 _amount,\n\t\tuint8 _tapType)\n\t\texternal {\n\t\trequire(vaultApprovals[_vault][_circle] == msg.sender || ApeVaultWrapper(_vault).owner() == msg.sender, \"Sender cannot upload a root\");\n\t\trequire(address(ApeVaultWrapper(_vault).vault()) == _token, \"Vault cannot supply token\");\n\t\t// require(circleToken[_circle][_token], \"Token not accepted\");\n\t\t_isTapAllowed(_vault, _circle, _token, _amount);\n\t\tuint256 epoch = epochTracking[_circle][_token];\n\t\tepochRoots[_circle][_token][epoch] = _root;\n\n\t\tepochTracking[_circle][_token]++;\n\t\tcircleAlloc[_circle][_token] += _amount;\n\t\tuint256 beforeBal = IERC20(_token).balanceOf(address(this));\n\t\tuint256 sharesRemoved = ApeVaultWrapper(_vault).tap(_amount, _tapType);\n\t\tuint256 afterBal = IERC20(_token).balanceOf(address(this));\n\t\trequire(afterBal - beforeBal == _amount, \"Did not receive correct amount of tokens\");\n\t\tif (sharesRemoved > 0)\n\t\t\temit apeVaultFundsTapped(_vault, address(ApeVaultWrapper(_vault).vault()), sharesRemoved);\n\t}\n\n\tfunction updateCircleAdmin(bytes32 _circle, address _admin) external {\n\t\tvaultApprovals[msg.sender][_circle] = _admin;\n\t\temit AdminApproved(msg.sender, _circle, _admin);\n\t}\n\n\tfunction isClaimed(bytes32 _circle, address _token, uint256 _epoch, uint256 _index) public view returns(bool) {\n\t\tuint256 wordIndex = _index / 256;\n\t\tuint256 bitIndex = _index % 256;\n\t\tuint256 word = epochClaimBitMap[_circle][_token][_epoch][wordIndex];\n\t\tuint256 bitMask = 1 << bitIndex;\n\t\treturn word & bitMask == bitMask;\n\t}\n\n\tfunction _setClaimed(bytes32 _circle, address _token, uint256 _epoch, uint256 _index) internal {\n\t\tuint256 wordIndex = _index / 256;\n\t\tuint256 bitIndex = _index % 256;\n\t\tepochClaimBitMap[_circle][_token][_epoch][wordIndex] |= 1 << bitIndex;\n\t}\n\n\tfunction claim(bytes32 _circle, address _token, uint256 _epoch, uint256 _index, address _account, uint256 _checkpoint, bool _redeemShares, bytes32[] memory _proof) public {\n\t\trequire(!isClaimed(_circle, _token, _epoch, _index), \"Claimed already\");\n\t\tbytes32 node = keccak256(abi.encodePacked(_index, _account, _checkpoint));\n\t\trequire(_proof.verify(epochRoots[_circle][_token][_epoch], node), \"Wrong proof\");\n\t\tuint256 currentCheckpoint = checkpoints[_circle][_token][_account];\n\t\trequire(_checkpoint > currentCheckpoint, \"Given checkpoint not higher than current checkpoint\");\n\t\t\n\t\tuint256 claimable = _checkpoint - currentCheckpoint;\n\t\trequire(claimable <= circleAlloc[_circle][_token], \"Can't claim more than circle has to give\");\n\t\tcircleAlloc[_circle][_token] -= claimable;\n\t\tcheckpoints[_circle][_token][_account] = _checkpoint;\n\t\t_setClaimed(_circle, _token, _epoch, _index);\n\t\tif (_redeemShares && msg.sender == _account)\n\t\t\tVaultAPI(_token).withdraw(claimable, _account);\n\t\telse\n\t\t\tIERC20(_token).safeTransfer(_account, claimable);\n\t\temit Claimed(_circle, _token, _epoch, _index, _account, claimable);\n\t}\n\n\tfunction claimMany(\n\t\tbytes32[] calldata _circles,\n\t\taddress[] calldata _tokensAndAccounts,\n\t\tuint256[] calldata _epochsIndexesCheckpoints,\n\t\tbool[] calldata _redeemShares,\n\t\tbytes32[][] memory _proofs) external {\n\t\tfor(uint256 i = 0; i < _circles.length; i++) {\n\t\t\tclaim(\n\t\t\t\t_circles[i],\n\t\t\t\t_tokensAndAccounts[i],\n\t\t\t\t_epochsIndexesCheckpoints[i],\n\t\t\t\t_epochsIndexesCheckpoints[i + _epochsIndexesCheckpoints.length / 3],\n\t\t\t\t_tokensAndAccounts[i + _tokensAndAccounts.length / 2],\n\t\t\t\t_epochsIndexesCheckpoints[i + _epochsIndexesCheckpoints.length * 2 / 3],\n\t\t\t\t_redeemShares[i],\n\t\t\t\t_proofs[i]\n\t\t\t\t);\n\t\t}\n\t}\n}\t"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/ApeRegistry.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"./TimeLock.sol\";\n\ncontract ApeRegistry is TimeLock {\n\taddress public feeRegistry;\n\taddress public router;\n\taddress public distributor;\n\taddress public factory;\n\taddress public treasury;\n\n\tconstructor(uint256 _minDelay) TimeLock(_minDelay) {}\n\n\tfunction setFeeRegistry(address _registry) external itself {\n\t\tfeeRegistry = _registry;\n\t}\n\n\tfunction setRouter(address _router) external itself {\n\t\trouter = _router;\n\t}\n\n\tfunction setDistributor(address _distributor) external itself {\n\t\tdistributor = _distributor;\n\t}\n\n\tfunction setFactory(address _factory) external itself {\n\t\tfactory = _factory;\n\t}\n\n\tfunction setTreasury(address _treasury) external itself {\n\t\ttreasury = _treasury;\n\t}\n}"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/FeeRegistry.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"./TimeLock.sol\";\n\ncontract FeeRegistry is TimeLock(0){\n\tuint256 private constant _staticFee = 100; // 100 | MAX = 10000\n\tbool public on;\n\n\tfunction activateFee() external itself {\n\t\ton = true;\n\t}\n\n\tfunction shutdownFee() external itself {\n\t\ton = false;\n\t}\n\n\tfunction staticFee() external view returns(uint256) {\n\t\tif (!on)\n\t\t\treturn 0;\n\t\treturn _staticFee;\n\t}\n\n\tfunction getVariableFee(uint256 _yield, uint256 _tapTotal) external returns(uint256 variableFee) {\n\t\tif (!on)\n\t\t\treturn 0;\n\t\tuint256 yieldRatio = _yield * 1000 / _tapTotal;\n\t\tuint256 baseFee = 100;\n\t\tif (yieldRatio >= 900)\n\t\t\tvariableFee = baseFee;        // 1%     @ 90% profit\n\t\telse if (yieldRatio >= 800)\n\t\t\tvariableFee = baseFee + 25;   // 1.25%  @ 80% profit\n\t\telse if (yieldRatio >= 700)\n\t\t\tvariableFee = baseFee + 50;   // 1.50%  @ 70% profit\n\t\telse if (yieldRatio >= 600)\n\t\t\tvariableFee = baseFee + 75;   // 1.75%  @ 60% profit\n\t\telse if (yieldRatio >= 500)\n\t\t\tvariableFee = baseFee + 100;  // 2.00%  @ 80% profit\n\t\telse if (yieldRatio >= 400)\n\t\t\tvariableFee = baseFee + 125;  // 2.25%  @ 80% profit\n\t\telse if (yieldRatio >= 300)\n\t\t\tvariableFee = baseFee + 150;  // 2.50%  @ 80% profit\n\t\telse if (yieldRatio >= 200)\n\t\t\tvariableFee = baseFee + 175;  // 2.75%  @ 80% profit\n\t\telse if (yieldRatio >= 100)\n\t\t\tvariableFee = baseFee + 200;  // 3.00%  @ 80% profit\n\t\telse\n\t\t\tvariableFee = baseFee + 250;  // 3.50%  @ 0% profit\n\t}\n}\n"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport {VaultAPI, BaseWrapper, RegistryAPI} from \"./wrapper/BaseWrapper.sol\";\nimport {ApeVaultFactory} from \"./wrapper/ApeVaultFactory.sol\";\nimport {ApeVaultWrapper} from \"./wrapper/ApeVault.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./TimeLock.sol\";\n\ncontract ApeRouter is TimeLock {\n\tusing SafeERC20 for IERC20;\n\n\n\tuint256 constant MAX_UINT = type(uint256).max;\n\n\taddress public yearnRegistry;\n\taddress public apeVaultFactory;\n\n\tconstructor(address _reg, address _factory, uint256 _minDelay) TimeLock(_minDelay)  {\n\t\tyearnRegistry = _reg;\n\t\tapeVaultFactory = _factory;\n\t}\n\n\tevent DepositInVault(address indexed vault, address token, uint256 amount);\n\tevent WithdrawFromVault(address indexed vault, address token, uint256 amount);\n\n\tfunction delegateDeposit(address _apeVault, address _token, uint256 _amount) external returns(uint256 deposited) {\n\t\tVaultAPI vault = VaultAPI(RegistryAPI(yearnRegistry).latestVault(_token));\n\t\trequire(address(vault) != address(0), \"ApeRouter: No vault for token\");\n\t\trequire(ApeVaultFactory(apeVaultFactory).vaultRegistry(_apeVault), \"ApeRouter: Vault does not exist\");\n\t\trequire(address(vault) == address(ApeVaultWrapper(_apeVault).vault()), \"ApeRouter: yearn Vault not identical\");\n\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\n\t\tif (IERC20(_token).allowance(address(this), address(vault)) < _amount) {\n            IERC20(_token).safeApprove(address(vault), 0); // Avoid issues with some IERC20(_token)s requiring 0\n            IERC20(_token).safeApprove(address(vault), MAX_UINT); // Vaults are trusted\n        }\n\n\t\tuint256 beforeBal = IERC20(_token).balanceOf(address(this));\n        \n\t\tuint256 sharesMinted = vault.deposit(_amount, _apeVault);\n\n        uint256 afterBal = IERC20(_token).balanceOf(address(this));\n        deposited = beforeBal - afterBal;\n        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\n        // Issue a refund if not everything was deposited\n\n\t\t// adding protocol removal call\n        //if (afterBal > 0) IERC20(_token).safeTransfer(msg.sender, afterBal);\n\n\n\t\tApeVaultWrapper(_apeVault).addFunds(deposited);\n\t\temit DepositInVault(_apeVault, _token, sharesMinted);\n\t}\n\n\tfunction delegateWithdrawal(address _recipient, address _apeVault, address _token, uint256 _shareAmount, bool _underlying) external{\n\t\tVaultAPI vault = VaultAPI(RegistryAPI(yearnRegistry).latestVault(_token));\n\t\trequire(address(vault) != address(0), \"ApeRouter: No vault for token\");\n\t\trequire(ApeVaultFactory(apeVaultFactory).vaultRegistry(msg.sender), \"ApeRouter: Vault does not exist\");\n\t\trequire(address(vault) == address(ApeVaultWrapper(_apeVault).vault()), \"ApeRouter: yearn Vault not identical\");\n\n\t\tif (_underlying)\n\t\t\tvault.withdraw(_shareAmount, _recipient);\n\t\telse\n\t\t\tvault.transfer(_recipient, _shareAmount);\n\t\temit WithdrawFromVault(address(vault), vault.token(), _shareAmount);\n\t}\n\n\tfunction removeTokens(address _token) external onlyOwner {\n\t\tIERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\n\t}\n\n\t /**\n     * @notice\n     *  Used to update the yearn registry.\n     * @param _registry The new _registry address.\n     */\n    function setRegistry(address _registry) external itself {\n        yearnRegistry = _registry;\n    }\n}"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/BaseWrapper.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nstruct StrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 minDebtPerHarvest;\n    uint256 maxDebtPerHarvest;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n}\n\ninterface VaultAPI is IERC20 {\n    function name() external view returns (string calldata);\n\n    function symbol() external view returns (string calldata);\n\n    function decimals() external view returns (uint256);\n\n    function apiVersion() external pure returns (string memory);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 expiry,\n        bytes calldata signature\n    ) external returns (bool);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function deposit() external returns (uint256);\n\n    function deposit(uint256 amount) external returns (uint256);\n\n    function deposit(uint256 amount, address recipient) external returns (uint256);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function withdraw() external returns (uint256);\n\n    function withdraw(uint256 maxShares) external returns (uint256);\n\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n\n    function token() external view returns (address);\n\n    function strategies(address _strategy) external view returns (StrategyParams memory);\n\n    function pricePerShare() external view returns (uint256);\n\n    function totalAssets() external view returns (uint256);\n\n    function depositLimit() external view returns (uint256);\n\n    function maxAvailableShares() external view returns (uint256);\n\n    /**\n     * View how much the Vault would increase this Strategy's borrow limit,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function creditAvailable() external view returns (uint256);\n\n    /**\n     * View how much the Vault would like to pull back from the Strategy,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function debtOutstanding() external view returns (uint256);\n\n    /**\n     * View how much the Vault expect this Strategy to return at the current\n     * block, based on its present performance (since its last report). Can be\n     * used to determine expectedReturn in your Strategy.\n     */\n    function expectedReturn() external view returns (uint256);\n\n    /**\n     * This is the main contact point where the Strategy interacts with the\n     * Vault. It is critical that this call is handled as intended by the\n     * Strategy. Therefore, this function will be called by BaseStrategy to\n     * make sure the integration is correct.\n     */\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment\n    ) external returns (uint256);\n\n    /**\n     * This function should only be used in the scenario where the Strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits its position as fast as possible, such as a sudden change in\n     * market conditions leading to losses, or an imminent failure in an\n     * external dependency.\n     */\n    function revokeStrategy() external;\n\n    /**\n     * View the governance address of the Vault to assert privileged functions\n     * can only be called by governance. The Strategy serves the Vault, so it\n     * is subject to governance defined by the Vault.\n     */\n    function governance() external view returns (address);\n\n    /**\n     * View the management address of the Vault to assert privileged functions\n     * can only be called by management. The Strategy serves the Vault, so it\n     * is subject to management defined by the Vault.\n     */\n    function management() external view returns (address);\n\n    /**\n     * View the guardian address of the Vault to assert privileged functions\n     * can only be called by guardian. The Strategy serves the Vault, so it\n     * is subject to guardian defined by the Vault.\n     */\n    function guardian() external view returns (address);\n}\n\n\ninterface RegistryAPI {\n    function governance() external view returns (address);\n\n    function latestVault(address token) external view returns (address);\n\n    function numVaults(address token) external view returns (uint256);\n\n    function vaults(address token, uint256 deploymentId) external view returns (address);\n}\n\n/**\n * @title Yearn Base Wrapper\n * @author yearn.finance\n * @notice\n *  BaseWrapper implements all of the required functionality to interoperate\n *  closely with the Vault contract. This contract should be inherited and the\n *  abstract methods implemented to adapt the Wrapper.\n *  A good starting point to build a wrapper is https://github.com/yearn/brownie-wrapper-mix\n *\n */\nabstract contract BaseWrapper {\n    using Math for uint256;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public token;\n\n    // Reduce number of external calls (SLOADs stay the same)\n    VaultAPI[] private _cachedVaults;\n\n    RegistryAPI public registry;\n\n    // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\n    uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\n    // Sentinal values used to save gas on deposit/withdraw/migrate\n    // NOTE: DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING\n    uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\n    uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\n    uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\n    // VaultsAPI.depositLimit is unlimited\n    uint256 constant UNCAPPED_DEPOSITS = type(uint256).max;\n\n    constructor(address _token, address _registry) {\n        // Recommended to use a token with a `Registry.latestVault(_token) != address(0)`\n        token = IERC20(_token);\n        // Recommended to use `v2.registry.ychad.eth`\n        registry = RegistryAPI(_registry);\n    }\n\n    /**\n     * @notice\n     *  Used to update the yearn registry.\n     * @param _registry The new _registry address.\n     */\n    function setRegistry(address _registry) external {\n        require(msg.sender == registry.governance());\n        // In case you want to override the registry instead of re-deploying\n        registry = RegistryAPI(_registry);\n        // Make sure there's no change in governance\n        // NOTE: Also avoid bricking the wrapper from setting a bad registry\n        require(msg.sender == registry.governance());\n    }\n\n    /**\n     * @notice\n     *  Used to get the most revent vault for the token using the registry.\n     * @return An instance of a VaultAPI\n     */\n    function bestVault() public view virtual returns (VaultAPI) {\n        return VaultAPI(registry.latestVault(address(token)));\n    }\n\n    /**\n     * @notice\n     *  Used to get all vaults from the registery for the token\n     * @return An array containing instances of VaultAPI\n     */\n    function allVaults() public view virtual returns (VaultAPI[] memory) {\n        uint256 cache_length = _cachedVaults.length;\n        uint256 num_vaults = registry.numVaults(address(token));\n\n        // Use cached\n        if (cache_length == num_vaults) {\n            return _cachedVaults;\n        }\n\n        VaultAPI[] memory vaults = new VaultAPI[](num_vaults);\n\n        for (uint256 vault_id = 0; vault_id < cache_length; vault_id++) {\n            vaults[vault_id] = _cachedVaults[vault_id];\n        }\n\n        for (uint256 vault_id = cache_length; vault_id < num_vaults; vault_id++) {\n            vaults[vault_id] = VaultAPI(registry.vaults(address(token), vault_id));\n        }\n\n        return vaults;\n    }\n\n    function _updateVaultCache(VaultAPI[] memory vaults) internal {\n        // NOTE: even though `registry` is update-able by Yearn, the intended behavior\n        //       is that any future upgrades to the registry will replay the version\n        //       history so that this cached value does not get out of date.\n        if (vaults.length > _cachedVaults.length) {\n            _cachedVaults = vaults;\n        }\n    }\n\n    /**\n     * @notice\n     *  Used to get the balance of an account accross all the vaults for a token.\n     *  @dev will be used to get the wrapper balance using totalVaultBalance(address(this)).\n     *  @param account The address of the account.\n     *  @return balance of token for the account accross all the vaults.\n     */\n    function totalVaultBalance(address account) public view returns (uint256 balance) {\n        VaultAPI[] memory vaults = allVaults();\n\n        for (uint256 id = 0; id < vaults.length; id++) {\n            balance = balance.add(vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals())));\n        }\n    }\n\n    /**\n     * @notice\n     *  Used to get the TVL on the underlying vaults.\n     *  @return assets the sum of all the assets managed by the underlying vaults.\n     */\n    function totalAssets() public view returns (uint256 assets) {\n        VaultAPI[] memory vaults = allVaults();\n\n        for (uint256 id = 0; id < vaults.length; id++) {\n            assets = assets.add(vaults[id].totalAssets());\n        }\n    }\n\n    function _deposit(\n        address depositor,\n        address receiver,\n        uint256 amount, // if `MAX_UINT256`, just deposit everything\n        bool pullFunds // If true, funds need to be pulled from `depositor` via `transferFrom`\n    ) internal returns (uint256 deposited) {\n        VaultAPI _bestVault = bestVault();\n\n        if (pullFunds) {\n            if (amount != DEPOSIT_EVERYTHING) {\n                token.safeTransferFrom(depositor, address(this), amount);\n            } else {\n                token.safeTransferFrom(depositor, address(this), token.balanceOf(depositor));\n            }\n        }\n\n        if (token.allowance(address(this), address(_bestVault)) < amount) {\n            token.safeApprove(address(_bestVault), 0); // Avoid issues with some tokens requiring 0\n            token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\n        }\n\n        // Depositing returns number of shares deposited\n        // NOTE: Shortcut here is assuming the number of tokens deposited is equal to the\n        //       number of shares credited, which helps avoid an occasional multiplication\n        //       overflow if trying to adjust the number of shares by the share price.\n        uint256 beforeBal = token.balanceOf(address(this));\n        if (receiver != address(this)) {\n            _bestVault.deposit(amount, receiver);\n        } else if (amount != DEPOSIT_EVERYTHING) {\n            _bestVault.deposit(amount);\n        } else {\n            _bestVault.deposit();\n        }\n\n        uint256 afterBal = token.balanceOf(address(this));\n        deposited = beforeBal.sub(afterBal);\n        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\n        // Issue a refund if not everything was deposited\n        if (depositor != address(this) && afterBal > 0) token.safeTransfer(depositor, afterBal);\n    }\n\n    function _withdraw(\n        address sender,\n        address receiver,\n        uint256 amount, // if `MAX_UINT256`, just withdraw everything\n        bool withdrawFromBest // If true, also withdraw from `_bestVault`\n    ) internal returns (uint256 withdrawn) {\n        VaultAPI _bestVault = bestVault();\n\n        VaultAPI[] memory vaults = allVaults();\n        _updateVaultCache(vaults);\n\n        // NOTE: This loop will attempt to withdraw from each Vault in `allVaults` that `sender`\n        //       is deposited in, up to `amount` tokens. The withdraw action can be expensive,\n        //       so it if there is a denial of service issue in withdrawing, the downstream usage\n        //       of this wrapper contract must give an alternative method of withdrawing using\n        //       this function so that `amount` is less than the full amount requested to withdraw\n        //       (e.g. \"piece-wise withdrawals\"), leading to less loop iterations such that the\n        //       DoS issue is mitigated (at a tradeoff of requiring more txns from the end user).\n        for (uint256 id = 0; id < vaults.length; id++) {\n            if (!withdrawFromBest && vaults[id] == _bestVault) {\n                continue; // Don't withdraw from the best\n            }\n\n            // Start with the total shares that `sender` has\n            uint256 availableShares = vaults[id].balanceOf(sender);\n\n            // Restrict by the allowance that `sender` has to this contract\n            // NOTE: No need for allowance check if `sender` is this contract\n            if (sender != address(this)) {\n                availableShares = Math.min(availableShares, vaults[id].allowance(sender, address(this)));\n            }\n\n            // Limit by maximum withdrawal size from each vault\n            availableShares = Math.min(availableShares, vaults[id].maxAvailableShares());\n\n            if (availableShares > 0) {\n                // Intermediate step to move shares to this contract before withdrawing\n                // NOTE: No need for share transfer if this contract is `sender`\n                if (sender != address(this)) vaults[id].transferFrom(sender, address(this), availableShares);\n\n                if (amount != WITHDRAW_EVERYTHING) {\n                    // Compute amount to withdraw fully to satisfy the request\n                    uint256 estimatedShares =\n                        amount\n                            .sub(withdrawn) // NOTE: Changes every iteration\n                            .mul(10**uint256(vaults[id].decimals()))\n                            .div(vaults[id].pricePerShare()); // NOTE: Every Vault is different\n\n                    // Limit amount to withdraw to the maximum made available to this contract\n                    // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\n                    // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\n                    if (estimatedShares > 0 && estimatedShares < availableShares) {\n                        withdrawn = withdrawn.add(vaults[id].withdraw(estimatedShares));\n                    } else {\n                        withdrawn = withdrawn.add(vaults[id].withdraw(availableShares));\n                    }\n                } else {\n                    withdrawn = withdrawn.add(vaults[id].withdraw());\n                }\n\n                // Check if we have fully satisfied the request\n                // NOTE: use `amount = WITHDRAW_EVERYTHING` for withdrawing everything\n                if (amount <= withdrawn) break; // withdrawn as much as we needed\n            }\n        }\n\n        // If we have extra, deposit back into `_bestVault` for `sender`\n        // NOTE: Invariant is `withdrawn <= amount`\n        if (withdrawn > amount && withdrawn.sub(amount) > _bestVault.pricePerShare().div(10**_bestVault.decimals())) {\n            // Don't forget to approve the deposit\n            if (token.allowance(address(this), address(_bestVault)) < withdrawn.sub(amount)) {\n                token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\n            }\n\n            _bestVault.deposit(withdrawn.sub(amount), sender);\n            withdrawn = amount;\n        }\n\n        // `receiver` now has `withdrawn` tokens as balance\n        if (receiver != address(this)) token.safeTransfer(receiver, withdrawn);\n    }\n\n    function _migrate(address account) internal returns (uint256) {\n        return _migrate(account, MIGRATE_EVERYTHING);\n    }\n\n    function _migrate(address account, uint256 amount) internal returns (uint256) {\n        // NOTE: In practice, it was discovered that <50 was the maximum we've see for this variance\n        return _migrate(account, amount, 0);\n    }\n\n    function _migrate(\n        address account,\n        uint256 amount,\n        uint256 maxMigrationLoss\n    ) internal returns (uint256 migrated) {\n        VaultAPI _bestVault = bestVault();\n\n        // NOTE: Only override if we aren't migrating everything\n        uint256 _depositLimit = _bestVault.depositLimit();\n        uint256 _totalAssets = _bestVault.totalAssets();\n        if (_depositLimit <= _totalAssets) return 0; // Nothing to migrate (not a failure)\n\n        uint256 _amount = amount;\n        if (_depositLimit < UNCAPPED_DEPOSITS && _amount < WITHDRAW_EVERYTHING) {\n            // Can only deposit up to this amount\n            uint256 _depositLeft = _depositLimit.sub(_totalAssets);\n            if (_amount > _depositLeft) _amount = _depositLeft;\n        }\n\n        if (_amount > 0) {\n            // NOTE: `false` = don't withdraw from `_bestVault`\n            uint256 withdrawn = _withdraw(account, address(this), _amount, false);\n            if (withdrawn == 0) return 0; // Nothing to migrate (not a failure)\n\n            // NOTE: `false` = don't do `transferFrom` because it's already local\n            migrated = _deposit(address(this), account, withdrawn, false);\n            // NOTE: Due to the precision loss of certain calculations, there is a small inefficency\n            //       on how migrations are calculated, and this could lead to a DoS issue. Hence, this\n            //       value is made to be configurable to allow the user to specify how much is acceptable\n            require(withdrawn.sub(migrated) <= maxMigrationLoss);\n        } // else: nothing to migrate! (not a failure)\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/TimeLock.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TimeLock is Ownable {\n\tuint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n\tmapping(bytes32 => uint256) public timestamps;\n\tuint256 public minDelay;\n\n\tevent CallScheduled(\n        bytes32 indexed id,\n        address target,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n\tevent CallCancelled(bytes32 id);\n\n\tevent CallExecuted(bytes32 indexed id, address target, bytes data);\n\n\tconstructor(uint256 _minDelay) {\n\t\tminDelay = _minDelay;\n\t}\n\n\n\tmodifier itself() {\n\t\trequire(msg.sender == address(this), \"TimeLock: Caller is not contract itself\");\n\t\t_;\n\t}\n\n\tfunction changeMinDelay(uint256 _min) external itself {\n\t\tminDelay = _min;\n\t}\n\n\tfunction hashOperation(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt) internal pure returns(bytes32) {\n\t\treturn keccak256(abi.encode(_target, _data, _predecessor, _salt));\n\t}\n\n\tfunction isPendingCall(bytes32 _id) public view returns(bool) {\n\t\treturn timestamps[_id] > _DONE_TIMESTAMP;\n\t}\n\n\tfunction isDoneCall(bytes32 _id) public view returns(bool) {\n\t\treturn timestamps[_id] == _DONE_TIMESTAMP;\n\t}\n\n\tfunction isReadyCall(bytes32 _id) public view returns(bool) {\n\t\treturn timestamps[_id] <= block.timestamp;\n\t}\n\n\tfunction schedule(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt, uint256 _delay) external onlyOwner {\n\t\tbytes32 id = hashOperation(_target, _data, _predecessor, _salt);\n\t\trequire(timestamps[id] == 0, \"TimeLock: Call already scheduled\");\n\t\trequire(_delay >= minDelay, \"TimeLock: Insufficient delay\");\n\t\ttimestamps[id] = block.timestamp + minDelay;\n\t\temit CallScheduled(id, _target, _data, _predecessor, _delay);\n\t}\n\n\tfunction cancel(bytes32 _id) external onlyOwner {\n\t\trequire(isPendingCall(_id), \"TimeLock: Call is not pending\");\n\t\ttimestamps[_id] = 0;\n\t\temit CallCancelled(_id);\n\t}\n\n\tfunction execute(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt, uint256 _delay) external onlyOwner {\n\t\tbytes32 id = hashOperation(_target, _data, _predecessor, _salt);\n\t\trequire(isReadyCall(id), \"TimeLock: Not ready for execution\");\n\t\trequire(!isDoneCall(id), \"TimeLock: Already executed\");\n\t\trequire(_predecessor == bytes32(0) || isDoneCall(_predecessor), \"TimeLock: Predecessor call not executed\");\n\t\t_call(id, _target, _data);\n\t\ttimestamps[id] = _DONE_TIMESTAMP;\n\t}\n\n\tfunction _call(\n        bytes32 id,\n        address target,\n        bytes calldata data\n    ) internal {\n        (bool success, ) = target.call(data);\n        require(success, \"Timelock: underlying transaction reverted\");\n\n        emit CallExecuted(id, target, data);\n    }\n\n}"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVaultFactory.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"./ApeVault.sol\";\n\ncontract ApeVaultFactory {\n\tmapping(address => bool) public vaultRegistry;\n\n\taddress public yearnRegistry;\n\taddress public apeRegistry;\n\n\tevent VaultCreated(address vault);\n\n\tconstructor(address _reg, address _apeReg) {\n\t\tapeRegistry = _apeReg;\n\t\tyearnRegistry = _reg;\n\t}\n\n\tfunction createApeVault(address _token, address _simpleToken) external {\n\t\tApeVaultWrapper vault = new ApeVaultWrapper(apeRegistry, _token, yearnRegistry, _simpleToken);\n\t\tvault.transferOwnership(msg.sender);\n\t\tvaultRegistry[address(vault)] = true;\n\t\temit VaultCreated(address(vault));\n\t}\n}"
    },
    "contracts/coordinape-protocol/contracts/circles/CoordinapeEpoch.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./Coordinape.sol\";\n\ncontract CoordinapeEpoch is ERC20, Ownable {\n    using Counters for Counters.Counter;\n\n    uint256 private _start;\n    uint256 private _end;\n\n    Counters.Counter private _participantsIds;\n    mapping(uint256 => address) private _participantsAddresses;\n    mapping(address => uint8) private _participants;\n\n    mapping(address => uint256) private _unspent;\n\n    mapping(address => mapping(address => string)) private _notes;\n\n    uint256 private _amount;\n\n    constructor(uint256 amount, uint256 end) ERC20(\"Give\", \"GIVE\") {\n        require(block.number < end, \"end block must be in the future.\");\n        _amount = amount;\n        _start = block.number;\n        _end = end;\n    }\n\n    function addParticipant(address recipient, uint8 permissions) public onlyOwner {\n        require(\n            permissions & Coordinape.PARTICIPANT != 0,\n            \"permissions must contain at least 'PARTICIPANT'.\"\n        );\n        require(\n            _participants[recipient] == Coordinape.EXTERNAL,\n            \"recipient is already a participant.\"\n        );\n        _participantsAddresses[Counters.current(_participantsIds)] = recipient;\n        _participants[recipient] = permissions;\n        _unspent[recipient] = _amount;\n        _mint(recipient, _amount);\n        Counters.increment(_participantsIds);\n    }\n\n    function removeParticipant(address recipient) public onlyOwner {\n        require(\n            _participants[recipient] & Coordinape.RECEIVER != 0,\n            \"sender is already a non-receiver participant.\"\n        );\n        _participants[recipient] = Coordinape.PARTICIPANT;\n        _burn(recipient, balanceOf(recipient));\n    }\n\n    function editParticipant(address recipient, uint8 permissions) public onlyOwner {\n        require(\n            permissions != Coordinape.EXTERNAL,\n            \"call removeParticipant to remove participant.\"\n        );\n        require(\n            permissions & Coordinape.PARTICIPANT != 0,\n            \"permissions must contain at least 'PARTICIPANT'.\"\n        );\n        _participants[recipient] = permissions;\n    }\n\n    function addNote(address recipient, string memory note) public onlyParticipant beforeEnd {\n        require(_msgSender() != recipient, \"cannot add a note to self.\");\n        require(\n            _participants[recipient] & Coordinape.PARTICIPANT != 0,\n            \"recipient is not a participant.\"\n        );\n        _notes[recipient][_msgSender()] = note;\n    }\n\n    function stopReceiving() public onlyParticipant {\n        require(\n            _participants[_msgSender()] & Coordinape.RECEIVER != 0,\n            \"sender is already a non-receiver participant.\"\n        );\n        _participants[_msgSender()] = _participants[_msgSender()] & ~Coordinape.PARTICIPANT;\n    }\n\n    function leave() public onlyParticipant {\n        stopReceiving();\n        _burn(_msgSender(), balanceOf(_msgSender()));\n    }\n\n    function participants() public view returns (address[] memory) {\n        address[] memory addresses = new address[](Counters.current(_participantsIds));\n        for (uint256 i = 0; i < Counters.current(_participantsIds); i++) {\n            addresses[i] = _participantsAddresses[i];\n        }\n        return addresses;\n    }\n\n    function receivedOf(address recipient) public view returns (uint256) {\n        return balanceOf(recipient) - _unspent[recipient];\n    }\n\n    function permissionsOf(address recipient) public view returns (uint8) {\n        return _participants[recipient];\n    }\n\n    function isParticipant(address recipient) public view returns (bool) {\n        return _participants[recipient] & Coordinape.PARTICIPANT != 0;\n    }\n\n    function startBlock() public view returns (uint256) {\n        return _start;\n    }\n\n    function endBlock() public view returns (uint256) {\n        return _end;\n    }\n\n    function ended() public view returns (bool) {\n        return block.number >= _end;\n    }\n\n    modifier onlyParticipant() {\n        require(\n            _participants[_msgSender()] & Coordinape.PARTICIPANT != 0,\n            \"method can only be called by a registered participant.\"\n        );\n        _;\n    }\n\n    modifier beforeEnd() {\n        require(!ended(), \"method can only be called before the end of the epoch.\");\n        _;\n    }\n\n    modifier afterEnd() {\n        require(ended(), \"method can only be called after the end of the epoch.\");\n        _;\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 0;\n    }\n\n    function _beforeTokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal override {\n        if (sender == address(0) || recipient == address(0)) return;\n        require(\n            _participants[sender] & Coordinape.PARTICIPANT != 0 &&\n                _participants[sender] & Coordinape.GIVER != 0,\n            \"sender must be a giver participant\"\n        );\n        require(\n            _participants[recipient] & Coordinape.PARTICIPANT != 0 &&\n                _participants[recipient] & Coordinape.RECEIVER != 0,\n            \"recipient must be a receiver participant\"\n        );\n        if (_unspent[sender] >= amount) {\n            _unspent[sender] -= amount;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/coordinape-protocol/contracts/circles/Coordinape.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nlibrary Coordinape {\n    uint8 public constant EXTERNAL = 0;     // 0000\n    uint8 public constant PARTICIPANT = 1;  // 0001\n    uint8 public constant RECEIVER = 2;     // 0010\n    uint8 public constant GIVER = 4;        // 0100\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/coordinape-protocol/contracts/circles/CoordinapeCircle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./CoordinapeRole.sol\";\nimport \"./CoordinapeEpoch.sol\";\nimport \"./CoordinapeTokenSet.sol\";\n\ncontract CoordinapeCircle is ERC721, Ownable {\n    using Counters for Counters.Counter;\n\n    enum EpochState {\n        CREATED,\n        GIVE_DISTRIBUTED,\n        FINALISED\n    }\n\n    Counters.Counter private _inviteIds;\n    mapping(address => uint256) private _invites;\n    mapping(uint256 => uint8) private _roles;\n\n    Counters.Counter private _inactiveMembers;\n\n    Counters.Counter private _epochIds;\n    mapping(uint256 => uint256) private _epochEnds;\n    mapping(uint256 => uint8) private _epochState;\n\n    uint256 private _minimumVouches;\n    mapping(address => uint256) private _vouches;\n    mapping(address => mapping(address => bool)) private _vouchedFor;\n\n    event EpochCreated(uint256 indexed id, uint256 end);\n    event VouchCreated(address indexed recipient, address indexed sender);\n    event InviteIssued(address indexed recipient, uint8 role);\n    event InviteRevoked(address indexed recipient, uint8 role);\n\n    string private _uri;\n\n    constructor(\n        string memory name,\n        string memory id,\n        string memory uri,\n        uint256 _minimumV\n    ) ERC721(name, id) {\n        _uri = uri;\n        _minimumVouches = _minimumV;\n    }\n\n    /*\n     *  Admin functions\n     */\n    function invite(address recipient, uint8 role) external onlyRole(CoordinapeRole.ADMIN) {\n        require(balanceOf(recipient) == 0, \"recipient is already invited.\");\n        require(role != 0, \"role cannot be none\");\n        _vouches[recipient] = _minimumVouches;\n        _issueInvite(recipient, role);\n    }\n\n    // to consider, should we remove them from the epoch too?\n    function revoke(address recipient) external onlyRole(CoordinapeRole.ADMIN) {\n        require(balanceOf(recipient) >= 1, \"recipient is not invited.\");\n        _revokeInvite(recipient);\n    }\n\n    function setupRole(address recipient, uint8 role) external onlyRole(CoordinapeRole.ADMIN) {\n        require(balanceOf(recipient) >= 1, \"recipient is not invited.\");\n        require(role != 0, \"role cannot be none\");\n        _roles[inviteOf(recipient)] = role;\n    }\n\n    function setMinimumVouches(uint256 value) external onlyOwner {\n        _minimumVouches = value;\n    }\n\n    /*\n     *  Member functions\n     */\n\n    function vouch(address recipient) external onlyRole(CoordinapeRole.VERIFIED) {\n        require(balanceOf(recipient) == 0, \"recipient is already invited.\");\n        require(!_vouchedFor[_msgSender()][recipient], \"sender already vouched for recipient.\");\n        _vouches[recipient] += 1;\n        _vouchedFor[_msgSender()][recipient] = true;\n        emit VouchCreated(recipient, _msgSender());\n    }\n\n    function enter() external {\n        require(balanceOf(_msgSender()) == 0, \"sender is already invited.\");\n        require(\n            _vouches[_msgSender()] >= _minimumVouches,\n            \"sender didn't receive minimum vouches.\"\n        );\n        _issueInvite(_msgSender(), CoordinapeRole.MEMBER);\n    }\n\n    /*\n     *  View functions\n     */\n\n    function state(uint256 _epoch) external view returns (uint8) {\n        return _epochState[_epoch];\n    }\n\n    function members() external view returns (address[] memory) {\n        address[] memory addresses = new address[](activeMembersCount());\n        uint256 j = 0;\n        for (uint256 i = 1; i <= Counters.current(_inviteIds); i++) {\n            if (_exists(i) && _roles[i] != 0) {\n                address owner = ownerOf(i);\n                addresses[j++] = owner;\n            }\n        }\n        return addresses;\n    }\n\n    function activeMembersCount() public view returns (uint256) {\n        return totalSupply();\n    }\n\n    function inviteOf(address recipient) public view returns (uint256) {\n        return _invites[recipient];\n    }\n\n    function permissionsOf(address recipient) external view returns (uint8) {\n        return _roles[inviteOf(recipient)];\n    }\n\n    function hasRole(address recipient, uint8 role) public view returns (bool) {\n        return _roles[inviteOf(recipient)] & role != 0;\n    }\n\n    function vouchesOf(address recipient) external view returns (uint256) {\n        return _vouches[recipient];\n    }\n\n    function minimumVouches() external view returns (uint256) {\n        return _minimumVouches;\n    }\n\n    // should be totalActiveMembers\n    function totalSupply() public view returns (uint256) {\n        return Counters.current(_inviteIds) - _inactiveMembers.current();\n    }\n\n    /*\n     *  Internal functions\n     */\n    function _epochInProgress() internal view returns (bool) {\n        uint256 epochId = Counters.current(_epochIds);\n        // return epochId > 0 && !CoordinapeEpoch(_epochs[epochId]).ended();\n        return epochId > 0 && block.number < _epochEnds[epochId];\n    }\n\n    function _issueInvite(address recipient, uint8 role) internal {\n        Counters.increment(_inviteIds);\n        uint256 tokenId = Counters.current(_inviteIds);\n        _mint(recipient, tokenId);\n        _roles[tokenId] = role;\n        _invites[recipient] = tokenId;\n        _vouches[recipient] = 0;\n        emit InviteIssued(recipient, role);\n    }\n\n    function _revokeInvite(address recipient) internal {\n        uint256 tokenId = _invites[recipient];\n        _inactiveMembers.increment();\n        //_burn(tokenId);\n        _roles[tokenId] = 0;\n        _invites[recipient] = 0;\n        emit InviteRevoked(recipient, 0);\n    }\n\n    modifier onlyRole(uint8 role) {\n        require(\n            (owner() == _msgSender()) || hasRole(_msgSender(), role),\n            \"method can only be called by who has enough role.\"\n        );\n        _;\n    }\n\n    modifier onlyInvited() {\n        require(balanceOf(_msgSender()) >= 1, \"method can only be called by an invited user.\");\n        _;\n    }\n\n    modifier onlyInProgress() {\n        require(_epochInProgress(), \"no epoch currently in progress.\");\n        _;\n    }\n\n\n\tfunction updateURI(string memory newURI) public onlyOwner {\n\t\t_uri = newURI;\n\t}\n\n    function _baseURI() internal view override returns (string memory) {\n        return _uri;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyOwner {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override onlyOwner {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public override onlyOwner {\n        super.safeTransferFrom(from, to, tokenId, _data);\n    }\n\n    function _beforeTokenTransfer(\n        address sender,\n        address recipient,\n        uint256 tokenId\n    ) internal override {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/coordinape-protocol/contracts/circles/CoordinapeRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nlibrary CoordinapeRole {\n    uint8 public constant ADMIN = 4; // 0100\n    uint8 public constant VERIFIED = 2; // 0010\n    uint8 public constant MEMBER = 1; // 0001\n}\n"
    },
    "contracts/coordinape-protocol/contracts/circles/CoordinapeTokenSet.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n\n// pragma solidity ^0.8.2;\n\n// import \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n// import \"@openzeppelin/contracts/utils/Counters.sol\";\n// import \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n// import \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n// import \"./Coordinape.sol\";\n// import \"./CoordinapeCircle.sol\";\n// import \"../ApeProtocol/MerkleDistributor.sol\";\n\n// contract TokenSet is ERC1155(\"some uri\"), Ownable, MerkleDistributor {\n// \tusing SafeMath for uint256;\n// \tusing Counters for Counters.Counter;\n// \tusing MerkleProof for bytes32[];\n\n\n// \tuint256 public set;\n// \tIERC20 public grantToken;\n// \taddress public treasury;\n\n// \tmapping(uint256 => uint256) public grants;\n// \tmapping(uint256 => uint256) public grantAmounts;\n// \tmapping(uint256 => uint256) public getSupply;\n// \tmapping(uint256 => Counters.Counter) private _participantsRemovedIds;\n// \tmapping(uint256 => mapping(address => uint8)) private _notParticipantsPerms;\n// \tmapping(uint256 => mapping(uint256 => address)) private _participantsRemovedAddresses;\n// \t//mapping(uint256 => mapping(address => uint256)) private _unspent;\n\n// \tmapping(address =>  bool) public authorised;\n\n// \tconstructor(address _grant) {\n// \t\tgrantToken = IERC20(_grant);\n// \t}\n\n// \tfunction setCaller(address _caller, bool _val) external onlyOwner {\n// \t\tauthorised[_caller] = _val;\n// \t}\n\n// \tfunction setTreasury(address _treasury) external onlyOwner {\n// \t\ttreasury = _treasury;\n// \t}\n\n// \tfunction startEpoch(uint256 _epoch, uint256 _grant) external onlyOwner {\n// \t\tgrants[_epoch] = _grant;\n// \t}\n\n// \tfunction removeParticipant(uint256 _epoch, address _recipient) external onlyOwner {\n// \t\trequire(CoordinapeCircle(owner()).permissionsOf(_recipient) & Coordinape.RECEIVER != 0,\n// \t\t\t\"Sender is not a default receiver\");\n// \t\t\t_participantsRemovedAddresses[_epoch][_participantsRemovedIds[_epoch].current()] = _recipient;\n// \t\t_participantsRemovedIds[_epoch].increment();\n//         _notParticipantsPerms[_epoch][_recipient] = Coordinape.RECEIVER;\n//     }\n\n// \tfunction participants(uint256 _epoch) public view returns (address[] memory) {\n// \t\tuint allMembers = CoordinapeCircle(owner()).activeMembersCount();\n// \t\tuint256 activeMembers = allMembers - _participantsRemovedIds[_epoch].current();\n//         address[] memory addresses = new address[](activeMembers);\n// \t\taddress[] memory totalAddresses = CoordinapeCircle(owner()).members();\n// \t\tuint256 j = 0;\n//         for (uint256 i = 0; i < allMembers; i++) {\n// \t\t\tif (_notParticipantsPerms[_epoch][totalAddresses[i]] == 0) {\n//             \taddresses[j] = totalAddresses[i];\n// \t\t\t\tj++;\n// \t\t\t}\n//         }\n//         return addresses;\n//     }\n\n// \tfunction lockEpochMerkleRoot(uint256 _epoch, bytes32 _merkleRoot, uint256 _epochGetSupply) external onlyOwner {\n// \t\trequire(CoordinapeCircle(owner()).state(_epoch) == 0, \"Wrong state to sync\");\n// \t\trequire(_epochGetSupply > 0, \"Get supply cannot be 0\");\n// \t\tepochRoots[_epoch] = _merkleRoot;\n// \t\tgetSupply[_epoch] = _epochGetSupply;\n// \t}\n\n\t\n\n\n// \t/*\n// \t * Fund current month allocation from either treasury (if set) or sender\n// \t * \n// \t * _amount: Amount of yUSD to distribute on current grant roune\n// \t */\n// \tfunction supplyGrant(uint256 _epoch) external onlyOwner {\n// \t\tif (treasury != address(0))\n// \t\t\tgrantToken.transferFrom(treasury, address(this), grants[_epoch]);\n// \t\telse\n// \t\t\tgrantToken.transferFrom(msg.sender, address(this), grants[_epoch]);\n// \t\tgrantAmounts[_epoch] = grants[_epoch];\n// \t}\n\n// \tfunction claim(uint256 _epoch, uint256 _index, address _account, uint256 _amount, bytes32[] memory _proof) external override {\n// \t\trequire(CoordinapeCircle(owner()).permissionsOf(_account) & Coordinape.RECEIVER != 0, \"User is not default receiver\");\n// \t\trequire(_notParticipantsPerms[_epoch][_account] & Coordinape.RECEIVER == 0, \"User opted out\");\n// \t\trequire(!isClaimed(_epoch, _index), \"Claimed already\");\n// \t\tbytes32 node = keccak256(abi.encodePacked(_index, _account, _amount));\n// \t\trequire(_proof.verify(epochRoots[_epoch], node), \"Wrong proof\");\n\t\t\n// \t\t_setClaimed(_epoch, _index);\n// \t\t_mint(_account, _epoch, _amount, \"\");\n// \t\temit Claimed(_epoch, _index, _account, _amount);\n// \t}\n\n// \t/*\n// \t * Burn $GET tokens to receive yUSD at the end of each grant rounds\n// \t * \n// \t *     _set: Set from which to collect funds\n// \t * _amount: Amount of $GET to burn to receive yUSD\n// \t */\n// \tfunction get(uint256 _epoch) external {\n// \t\trequire(CoordinapeCircle(owner()).state(_epoch) == 2, \"Wrong state to get\");\n// \t\tuint256 balance = balanceOf(msg.sender, _epoch);\n// \t\trequire(balance > 0, \"No Get tokens\");\n// \t\tuint256 grant = grantAmounts[_epoch];\n// \t\trequire(grant > 0, \"No funds\");\n// \t\tuint256 supply = getSupply[_epoch];\n// \t\tuint256 alloc = grant.mul(balance).div(supply);\n\n// \t\t_burn(msg.sender, _epoch, balance);\n// \t\tgrantAmounts[_epoch] -= alloc;\n// \t\tgetSupply[_epoch] -= balance;\n// \t\tgrantToken.transfer(msg.sender, alloc);\n// \t}\n\n// \tfunction permissionsOf(uint256 _epoch, address _recipient) public view returns (uint8) {\n// \t\tuint8 defaultPerms = CoordinapeCircle(owner()).permissionsOf(_recipient);\n// \t\tif (_notParticipantsPerms[_epoch][_recipient] & Coordinape.RECEIVER == 0)\n//         \treturn defaultPerms;\n// \t\telse\n// \t\t\treturn 0;\n//     }\n\n//     function isParticipant(uint256 _epoch, address _recipient) public view returns (bool) {\n//         return CoordinapeCircle(owner()).permissionsOf(_recipient) & Coordinape.RECEIVER != 0 &&\n// \t\t\t\t_notParticipantsPerms[_epoch][_recipient] & Coordinape.RECEIVER == 0;\n//     }\n\n// \t// we could have this again as the only token minted would be grant-backed\n// \tfunction safeTransferFrom(\n//         address from,\n//         address to,\n//         uint256 id,\n//         uint256 amount,\n//         bytes memory data\n//     )\n//         public\n//         virtual\n//         override\n// \t\tonlyOwner\n//     {\n// \t\tsuper.safeTransferFrom(from, to, id, amount, data);\n// \t}\n\n\n// \tfunction safeBatchTransferFrom(\n//         address from,\n//         address to,\n//         uint256[] memory ids,\n//         uint256[] memory amounts,\n//         bytes memory data\n//     )\n//         public\n//         virtual\n//         override\n//     {\n// \t\trevert();\n// \t}\n// \t// modifier authorised() {\n// \t// \trequire(authorised[msg.sender], \"not authorised\");\n// \t// \t _;\n// \t// }\n// }"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/AffiliateToken.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport {VaultAPI, BaseWrapper} from \"./BaseWrapper.sol\";\n\ncontract AffiliateToken is ERC20, BaseWrapper {\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n    bytes32 public immutable DOMAIN_SEPARATOR;\n\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\n            \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n        );\n\n    /// @notice A record of states for signing / validating signatures\n    mapping(address => uint256) public nonces;\n\n    address public affiliate;\n\n    address public pendingAffiliate;\n\n\tuint8 private _decimals;\n\n    modifier onlyAffiliate() {\n        require(msg.sender == affiliate);\n        _;\n    }\n\n    constructor(\n        address _token,\n        address _registry,\n        string memory name,\n        string memory symbol\n    ) BaseWrapper(_token, _registry) ERC20(name, symbol) {\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                _getChainId(),\n                address(this)\n            )\n        );\n        affiliate = msg.sender;\n        _decimals = uint8(ERC20(address(token)).decimals());\n    }\n\n\tfunction decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function _getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n\n    function setAffiliate(address _affiliate) external onlyAffiliate {\n        pendingAffiliate = _affiliate;\n    }\n\n    function acceptAffiliate() external {\n        require(msg.sender == pendingAffiliate);\n        affiliate = msg.sender;\n    }\n\n    function _shareValue(uint256 numShares) internal view returns (uint256) {\n        uint256 totalShares = totalSupply();\n\n        if (totalShares > 0) {\n            return\n\t\t\t\ttotalVaultBalance(address(this)) * numShares / totalShares;\n        } else {\n            return numShares;\n        }\n    }\n\n    function pricePerShare() external view returns (uint256) {\n        return\n\t\ttotalVaultBalance(address(this)) * (10**uint256(decimals())) / totalSupply();\n    }\n\n    function _sharesForValue(uint256 amount) internal view returns (uint256) {\n        // total wrapper assets before deposit (assumes deposit already occured)\n        uint256 totalWrapperAssets =\n            totalVaultBalance(address(this)) - amount;\n\n        if (totalWrapperAssets > 0) {\n            return totalSupply() * amount / totalWrapperAssets;\n        } else {\n            return amount;\n        }\n    }\n\n    // function deposit() external returns (uint256) {\n    //     return deposit(type(uint256).max); // Deposit everything\n    // }\n\n    // function deposit(uint256 amount) public returns (uint256 deposited) {\n    //     deposited = _deposit(msg.sender, address(this), amount, true); // `true` = pull from `msg.sender`\n    //     uint256 shares = _sharesForValue(amount); // NOTE: Must be calculated after deposit is handled\n    //     _mint(msg.sender, shares);\n    // }\n\n    // function withdraw() external returns (uint256) {\n    //     return withdraw(balanceOf(msg.sender));\n    // }\n\n    // function withdraw(uint256 shares) public returns (uint256) {\n    //     _burn(msg.sender, shares);\n    //     return _withdraw(address(this), msg.sender, _shareValue(shares), true); // `true` = withdraw from `bestVault`\n    // }\n\n    // function migrate() external onlyAffiliate returns (uint256) {\n    //     return _migrate(address(this));\n    // }\n\n    // function migrate(uint256 amount) external onlyAffiliate returns (uint256) {\n    //     return _migrate(address(this), amount);\n    // }\n\n    // function migrate(uint256 amount, uint256 maxMigrationLoss)\n    //     external\n    //     onlyAffiliate\n    //     returns (uint256)\n    // {\n    //     return _migrate(address(this), amount, maxMigrationLoss);\n    // }\n\n    /**\n     * @notice Triggers an approval from owner to spends\n     * @param owner The address to approve from\n     * @param spender The address to be approved\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n     * @param deadline The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(owner != address(0), \"permit: signature\");\n        require(block.timestamp <= deadline, \"permit: expired\");\n\n        bytes32 structHash =\n            keccak256(\n                abi.encode(\n                    PERMIT_TYPEHASH,\n                    owner,\n                    spender,\n                    amount,\n                    nonces[owner]++,\n                    deadline\n                )\n            );\n        bytes32 digest =\n            keccak256(\n                abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, structHash)\n            );\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory == owner, \"permit: unauthorized\");\n\n        _approve(owner, spender, amount);\n    }\n}"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/token/ApeToken.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./TokenAccessControl.sol\";\n\ncontract ApeToken is ERC20(\"coordinape.com\", \"APE\"), TokenAccessControl {\n\tuint256 immutable private _cap = 1_000_000_000 ether;\n\n\tbytes32 private immutable _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\tbytes32 public DOMAIN_SEPARATOR;\n\n\tmapping(address => uint256) public nonces;\n\n\tconstructor() {\n\n\t\tuint chainId = block.chainid;\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(\"coordinape.com\")),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n\t}\n\n\tfunction cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n\tfunction _mint(address account, uint256 amount) internal virtual override {\n        require(totalSupply() + amount <= cap(), \"ApeToken: cap exceeded\");\n        super._mint(account, amount);\n    }\n\n    function mint(address _account, uint256 _amount) external isMinter(msg.sender) {\n        _mint(_account, _amount);\n    }\n\n\tfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n        require(block.timestamp <= deadline, \"ApeToken: expired deadline\");\n\n        bytes32 digest = keccak256(\n            abi.encode(\n\t\t\t\t'\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n\n        address signer = ECDSA.recover(digest, v, r, s);\n        require(signer == owner, \"ApeToken: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    function transfer(address _to, uint256 _amount) public override isPaused() returns(bool) {\n        return ERC20.transfer(_to, _amount);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) public override isPaused() returns(bool) {\n        return ERC20.transferFrom(_from, _to, _amount);\n    }\n}"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/token/TokenAccessControl.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TokenAccessControl is Ownable {\n\tmapping(address => bool) public minters;\n\tmapping(address => bool) public whitelistedAddresses;\n\n\tbool public paused;\n\tbool public foreverUnpaused;\n\tbool public mintingDisabled;\n\tbool public whitelistDisabled;\n\n\tevent MintersAdded(address[] minters);\n\tevent MintersRemoved(address[] minters);\n\tevent WhitelistedAddressesAdded(address[] minters);\n\tevent WhitelistedAddressesRemoved(address[] minters);\n\n\n\tmodifier isPaused() {\n\t\trequire(!paused || (whitelistedAddresses[msg.sender] && !whitelistDisabled), \"AccessControl: User cannot transfer\");\n\t\t_;\n\t}\n\n\tmodifier isMinter(address _caller) {\n\t\trequire(!mintingDisabled, \"AccessControl: Contract cannot mint tokens anymore\");\n\t\trequire(minters[_caller], \"AccessControl: Cannot mint\");\n\t\t_;\n\t}\n\n\tfunction disableWhitelist() external onlyOwner {\n\t\trequire(!whitelistDisabled, \"AccessControl: Whitelist already disabled\");\n\t\twhitelistDisabled = true;\n\t}\n\n\tfunction changePauseStatus(bool _status) external onlyOwner {\n\t\trequire(!foreverUnpaused, \"AccessControl: Contract is unpaused forever\");\n\t\tpaused = _status;\n\t} \n\n\n\tfunction disablePausingForever() external onlyOwner {\n\t\trequire(!foreverUnpaused, \"AccessControl: Contract is unpaused forever\");\n\t\tforeverUnpaused = true;\n\t\tpaused = false;\n\t}\n\n\tfunction addMinters(address[] calldata _minters) external onlyOwner {\n\t\trequire(!mintingDisabled, \"AccessControl: Contract cannot mint tokens anymore\");\n\n\t\tfor(uint256 i = 0; i < _minters.length; i++)\n\t\t\tminters[_minters[i]] = true;\n\t\temit MintersAdded(_minters);\n\t}\n\n\tfunction removeMinters(address[] calldata _minters) external onlyOwner {\n\t\trequire(!mintingDisabled, \"AccessControl: Contract cannot mint tokens anymore\");\n\n\t\tfor(uint256 i = 0; i < _minters.length; i++)\n\t\t\tminters[_minters[i]] = false;\n\t\temit MintersRemoved(_minters);\n\t}\n\n\tfunction addWhitelistedAddresses(address[] calldata _addresses) external onlyOwner {\n\t\trequire(!whitelistDisabled, \"AccessControl: Whitelist already disabled\");\n\n\t\tfor(uint256 i = 0; i < _addresses.length; i++)\n\t\t\twhitelistedAddresses[_addresses[i]] = true;\n\t\temit WhitelistedAddressesAdded(_addresses);\n\t}\n\n\tfunction removeWhitelistedAddresses(address[] calldata _addresses) external onlyOwner {\n\t\trequire(!whitelistDisabled, \"AccessControl: Whitelist already disabled\");\n\n\t\tfor(uint256 i = 0; i < _addresses.length; i++)\n\t\t\twhitelistedAddresses[_addresses[i]] = false;\n\t\temit WhitelistedAddressesRemoved(_addresses);\n\t}\n\n\tfunction disableMintingForever() external onlyOwner {\n\t\trequire(!mintingDisabled, \"AccessControl: Contract cannot mint anymore\");\n\t\tmintingDisabled = true;\n\t}\n}"
    },
    "contracts/coordinape-protocol/contracts/ApeProtocol/MockVaults/MockVault.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockRegistry {\n\n\taddress public governance;\n\n\tmapping(address => address) public latestVault;\n\tmapping(address => uint256) public numVaults;\n\tmapping(address => mapping(uint256 => address)) public vaults;\n\n\tconstructor() {\n\t\tgovernance = msg.sender;\n\t}\n\n\tfunction addVault(address _token, address _vault) external {\n\t\tuint256 current = numVaults[_token];\n\t\tlatestVault[_token] = _vault;\n\t\tnumVaults[_token]++;\n\t\tvaults[_token][current] = _vault;\n\t}\n}\n\ncontract MockVaultFactory {\n\tMockRegistry public registry;\n\n\tconstructor(address _reg) {\n\t\tregistry = MockRegistry(_reg);\n\t}\n\n\tfunction createVault(address _token) external returns(address) {\n\t\tMockVault newVault = new MockVault(_token);\n\t\tregistry.addVault(_token, address(newVault));\n\t\treturn address(newVault);\n\t}\n}\n\ncontract MockVault is ERC20(\"VaultToken\", \"VT\") {\n\n\tMockToken public token;\n\n\tuint256 public depositLimit;\n\n\tconstructor (address _token) {\n\t\ttoken = MockToken(_token);\n\t\tdepositLimit = type(uint256).max;\n\t}\n\n\tfunction totalAssets() external view returns (uint256) {\n\t\treturn token.balanceOf(address(this));\n\t}\n\n\tfunction pricePerShare() public view returns(uint256) {\n\t\tif (totalSupply() == 0)\n\t\t\treturn 10 ** uint256(decimals());\n\t\telse {\n\t\t\treturn (10 ** uint256(decimals())) * token.balanceOf(address(this)) / totalSupply();\n\t\t}\n\t}\n\n\tfunction maxAvailableShares() external view returns (uint256) {\n\t\treturn totalSupply();\n\t}\n\n\tfunction deposit() external returns (uint256) {\n\t\treturn deposit(token.balanceOf(msg.sender));\n\t}\n\n    function deposit(uint256 amount) public returns (uint256) {\n\t\treturn deposit(amount, msg.sender);\n\t}\n\n    function deposit(uint256 amount, address recipient) public returns (uint256 deposited) {\n\t\tdepositLimit -= amount;\n\t\tif (totalSupply() == 0) {\n\t\t\t_mint(recipient, amount);\n\t\t\tdeposited = amount;\n\t\t}\n\t\telse {\n\t\t\tuint256 _amount = amount * balanceOf(address(this)) / token.balanceOf(address(this));\n\t\t\t_mint(recipient, _amount);\n\t\t\tdeposited = _amount;\n\t\t}\n\t\ttoken.transferFrom(msg.sender, address(this), amount);\n\t}\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function withdraw() external returns (uint256) {\n\t\treturn withdraw(balanceOf(msg.sender));\n\t}\n\n    function withdraw(uint256 maxShares) public returns (uint256) {\n\t\treturn withdraw(maxShares, msg.sender);\n\t}\n\n    function withdraw(uint256 maxShares, address recipient) public returns (uint256 amount) {\n\t\trequire(maxShares <= balanceOf(msg.sender) && maxShares > 0);\n\t\tamount = maxShares * token.balanceOf(address(this)) / totalSupply();\n\t\t_burn(msg.sender, maxShares);\n\t\ttoken.transfer(recipient, amount);\n\t}\n\n\tfunction goodHarvest(uint256 _apr) external {\n\t\tuint256 toMint = token.balanceOf(address(this)) * _apr / 100;\n\t\ttoken.mint(toMint);\n\t}\n\n\tfunction badHarvest(uint256 _apr) external {\n\t\tuint256 toBurn = token.balanceOf(address(this)) * _apr / 100;\n\t\ttoken.burn(toBurn);\n\t}\n}\n\ncontract MockToken is ERC20(\"Mock\", \"MCK\") {\n\tfunction mint(uint256 _amount) external {\n\t\t_mint(msg.sender, _amount);\n\t}\n\n\tfunction burn(uint256 _amount) external {\n\t\t_burn(msg.sender, _amount);\n\t}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}