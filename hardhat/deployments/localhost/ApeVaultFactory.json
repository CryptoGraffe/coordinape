{
  "address": "0x978A2941BA6CA861DFEE872c75e9FA5C51030d63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_apeReg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "apeRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_simpleToken",
          "type": "address"
        }
      ],
      "name": "createApeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yearnRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7aab9598d7061662d88a4bd594624ad39f5745a1eb13816976735ed71a8df359",
  "receipt": {
    "to": null,
    "from": "0x64EFa8dFc175098E7CdeBb99112C6e4BA22bb642",
    "contractAddress": "0x978A2941BA6CA861DFEE872c75e9FA5C51030d63",
    "transactionIndex": 0,
    "gasUsed": "3527112",
    "logsBloom": "0x
    "blockHash": "0xe216ac1e4f5a793e12819f4c8dee1ee97d795e8e4d402788cd5e1bf17bdefd41",
    "transactionHash": "0x7aab9598d7061662d88a4bd594624ad39f5745a1eb13816976735ed71a8df359",
    "logs": [],
    "blockNumber": 13632748,
    "cumulativeGasUsed": "3527112",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE15461B18EE31b7379019Dc523231C57d1Cbc18c",
    "0xB6f8ed8dB8d6AC13f9d34dC0353Bc86c445c36EC"
  ],
  "solcInputHash": "9e6e1217bf4d4d1936e45638d60026ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeReg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_simpleToken\",\"type\":\"address\"}],\"name\":\"createApeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearnRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVaultFactory.sol\":\"ApeVaultFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeAllowanceModule.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nabstract contract ApeAllowanceModule {\\n\\n\\tstruct Allowance {\\n\\t\\tuint256 maxAmount;\\n\\t\\tuint256 maxInterval;\\n\\t\\t//uint256 tapType; // 0 pure profit | 1 any | 2 shitcoins \\n\\t}\\n\\n\\tstruct CurrentAllowance {\\n\\t\\tuint256 debt;\\n\\t\\tuint256 intervalStart;\\n\\t\\tuint256 epochs;\\n\\t}\\n\\n\\t// vault => circle => token => allowance\\n\\tmapping(address => mapping(bytes32 => mapping(address => Allowance))) public allowances;\\n\\tmapping(address => mapping(bytes32 => mapping(address => CurrentAllowance))) public currentAllowances;\\n\\n\\tevent AllowanceUpdated(address vault, bytes32 circle, address token, uint256 amount, uint256 interval);\\n\\n\\t// TODO add tap type checks\\n\\tfunction setAllowance(\\n\\t\\tbytes32 _circle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _interval,\\n\\t\\tuint256 _epochs\\n\\t\\t) external {\\n\\t\\tallowances[msg.sender][_circle][_token] = Allowance({\\n\\t\\t\\tmaxAmount: _amount,\\n\\t\\t\\tmaxInterval: _interval\\n\\t\\t});\\n\\n\\t\\tcurrentAllowances[msg.sender][_circle][_token] = CurrentAllowance({\\n\\t\\t\\tdebt: 0,\\n\\t\\t\\tintervalStart: block.timestamp,\\n\\t\\t\\tepochs: _epochs\\n\\t\\t});\\n\\t\\temit AllowanceUpdated(msg.sender, _circle, _token, _amount, _interval);\\n\\t}\\n\\n\\tfunction _isTapAllowed(\\n\\t\\taddress _vault,\\n\\t\\tbytes32 _circle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount\\n\\t\\t) internal {\\n\\t\\tAllowance memory allowance = allowances[_vault][_circle][_token];\\n\\t\\tCurrentAllowance storage currentAllowance = currentAllowances[_vault][_circle][_token];\\n\\n\\t\\t_updateInterval(currentAllowance, allowance);\\n\\t\\trequire(currentAllowance.debt + _amount <= allowance.maxAmount, \\\"Circle does not have sufficient allowance\\\");\\n\\t\\tcurrentAllowance.debt += _amount;\\n\\t}\\n\\n\\tfunction _updateInterval(CurrentAllowance storage _currentAllowance, Allowance memory _allowance) internal {\\n\\t\\tuint256 elapsedTime = block.timestamp - _currentAllowance.intervalStart;\\n\\t\\tif (elapsedTime > _allowance.maxInterval) {\\n\\t\\t\\trequire(_currentAllowance.epochs > 0, \\\"Circle cannot tap anymore\\\");\\n\\t\\t\\t_currentAllowance.debt = 0;\\n\\t\\t\\t_currentAllowance.intervalStart += _allowance.maxInterval * (elapsedTime / _allowance.maxInterval);\\n\\t\\t\\t_currentAllowance.epochs--;\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x7252707ee8971a4eeb23b898b5728d40977336644139eb7e627cb2debfabb772\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeDistributor.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport \\\"./wrapper/ApeVault.sol\\\";\\nimport \\\"./ApeAllowanceModule.sol\\\";\\nimport {VaultAPI} from \\\"./wrapper/BaseWrapper.sol\\\";\\n\\ncontract ApeDistributor is ApeAllowanceModule, Ownable {\\n\\tusing MerkleProof for bytes32[];\\n\\tusing SafeERC20 for IERC20;\\n\\n\\n\\t// address to approve admins for a circle\\n\\t// vault => circle => admin address\\n\\tmapping(address => mapping(bytes32 => address)) public vaultApprovals;\\n\\n\\t// accepted tokens for given circle\\n\\t// circle => grant token => bool\\n\\t// mapping(address => mapping(address => bool)) public circleToken;\\n\\n\\t// roots following this mapping:\\n\\t// circle address => token address => epoch ID => root\\n\\tmapping(bytes32 =>mapping(address => mapping(uint256 => bytes32))) public epochRoots;\\n\\tmapping(bytes32 =>mapping(address => uint256)) public epochTracking;\\n\\tmapping(bytes32 => mapping(address => mapping(uint256 => mapping(uint256 => uint256)))) public epochClaimBitMap;\\n\\n\\tmapping(bytes32 => mapping(address => uint256)) public circleAlloc;\\n\\n\\t// checkpoints following this mapping:\\n\\t// circle => token => address => checkpoint\\n\\tmapping(bytes32 => mapping(address => mapping(address => uint256))) public checkpoints;\\n\\n\\tevent AdminApproved(address indexed vault, bytes32 indexed circle, address indexed admin);\\n\\n\\tevent Claimed(bytes32 circle, address token, uint256 epoch, uint256 index, address account, uint256 amount);\\n\\n\\tevent apeVaultFundsTapped(address indexed apeVault, address yearnVault, uint256 amount);\\n\\n\\tfunction uploadEpochRoot(\\n\\t\\taddress _vault,\\n\\t\\tbytes32 _circle,\\n\\t\\taddress _token,\\n\\t\\tbytes32 _root,\\n\\t\\tuint256 _amount,\\n\\t\\tuint8 _tapType)\\n\\t\\texternal {\\n\\t\\trequire(vaultApprovals[_vault][_circle] == msg.sender || ApeVaultWrapper(_vault).owner() == msg.sender, \\\"Sender cannot upload a root\\\");\\n\\t\\trequire(address(ApeVaultWrapper(_vault).vault()) == _token, \\\"Vault cannot supply token\\\");\\n\\t\\t// require(circleToken[_circle][_token], \\\"Token not accepted\\\");\\n\\t\\t_isTapAllowed(_vault, _circle, _token, _amount);\\n\\t\\tuint256 epoch = epochTracking[_circle][_token];\\n\\t\\tepochRoots[_circle][_token][epoch] = _root;\\n\\n\\t\\tepochTracking[_circle][_token]++;\\n\\t\\tcircleAlloc[_circle][_token] += _amount;\\n\\t\\tuint256 beforeBal = IERC20(_token).balanceOf(address(this));\\n\\t\\tuint256 sharesRemoved = ApeVaultWrapper(_vault).tap(_amount, _tapType);\\n\\t\\tuint256 afterBal = IERC20(_token).balanceOf(address(this));\\n\\t\\trequire(afterBal - beforeBal == _amount, \\\"Did not receive correct amount of tokens\\\");\\n\\t\\tif (sharesRemoved > 0)\\n\\t\\t\\temit apeVaultFundsTapped(_vault, address(ApeVaultWrapper(_vault).vault()), sharesRemoved);\\n\\t}\\n\\n\\tfunction updateCircleAdmin(bytes32 _circle, address _admin) external {\\n\\t\\tvaultApprovals[msg.sender][_circle] = _admin;\\n\\t\\temit AdminApproved(msg.sender, _circle, _admin);\\n\\t}\\n\\n\\tfunction isClaimed(bytes32 _circle, address _token, uint256 _epoch, uint256 _index) public view returns(bool) {\\n\\t\\tuint256 wordIndex = _index / 256;\\n\\t\\tuint256 bitIndex = _index % 256;\\n\\t\\tuint256 word = epochClaimBitMap[_circle][_token][_epoch][wordIndex];\\n\\t\\tuint256 bitMask = 1 << bitIndex;\\n\\t\\treturn word & bitMask == bitMask;\\n\\t}\\n\\n\\tfunction _setClaimed(bytes32 _circle, address _token, uint256 _epoch, uint256 _index) internal {\\n\\t\\tuint256 wordIndex = _index / 256;\\n\\t\\tuint256 bitIndex = _index % 256;\\n\\t\\tepochClaimBitMap[_circle][_token][_epoch][wordIndex] |= 1 << bitIndex;\\n\\t}\\n\\n\\tfunction claim(bytes32 _circle, address _token, uint256 _epoch, uint256 _index, address _account, uint256 _checkpoint, bool _redeemShares, bytes32[] memory _proof) public {\\n\\t\\trequire(!isClaimed(_circle, _token, _epoch, _index), \\\"Claimed already\\\");\\n\\t\\tbytes32 node = keccak256(abi.encodePacked(_index, _account, _checkpoint));\\n\\t\\trequire(_proof.verify(epochRoots[_circle][_token][_epoch], node), \\\"Wrong proof\\\");\\n\\t\\tuint256 currentCheckpoint = checkpoints[_circle][_token][_account];\\n\\t\\trequire(_checkpoint > currentCheckpoint, \\\"Given checkpoint not higher than current checkpoint\\\");\\n\\t\\t\\n\\t\\tuint256 claimable = _checkpoint - currentCheckpoint;\\n\\t\\trequire(claimable <= circleAlloc[_circle][_token], \\\"Can't claim more than circle has to give\\\");\\n\\t\\tcircleAlloc[_circle][_token] -= claimable;\\n\\t\\tcheckpoints[_circle][_token][_account] = _checkpoint;\\n\\t\\t_setClaimed(_circle, _token, _epoch, _index);\\n\\t\\tif (_redeemShares && msg.sender == _account)\\n\\t\\t\\tVaultAPI(_token).withdraw(claimable, _account);\\n\\t\\telse\\n\\t\\t\\tIERC20(_token).safeTransfer(_account, claimable);\\n\\t\\temit Claimed(_circle, _token, _epoch, _index, _account, claimable);\\n\\t}\\n\\n\\tfunction claimMany(\\n\\t\\tbytes32[] calldata _circles,\\n\\t\\taddress[] calldata _tokensAndAccounts,\\n\\t\\tuint256[] calldata _epochsIndexesCheckpoints,\\n\\t\\tbool[] calldata _redeemShares,\\n\\t\\tbytes32[][] memory _proofs) external {\\n\\t\\tfor(uint256 i = 0; i < _circles.length; i++) {\\n\\t\\t\\tclaim(\\n\\t\\t\\t\\t_circles[i],\\n\\t\\t\\t\\t_tokensAndAccounts[i],\\n\\t\\t\\t\\t_epochsIndexesCheckpoints[i],\\n\\t\\t\\t\\t_epochsIndexesCheckpoints[i + _epochsIndexesCheckpoints.length / 3],\\n\\t\\t\\t\\t_tokensAndAccounts[i + _tokensAndAccounts.length / 2],\\n\\t\\t\\t\\t_epochsIndexesCheckpoints[i + _epochsIndexesCheckpoints.length * 2 / 3],\\n\\t\\t\\t\\t_redeemShares[i],\\n\\t\\t\\t\\t_proofs[i]\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\t\",\"keccak256\":\"0x37c9230071451550898a681c215b061bbafdd26db2defeed42138d35167b255e\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeRegistry.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"./TimeLock.sol\\\";\\n\\ncontract ApeRegistry is TimeLock {\\n\\taddress public feeRegistry;\\n\\taddress public router;\\n\\taddress public distributor;\\n\\taddress public factory;\\n\\taddress public treasury;\\n\\n\\tconstructor(uint256 _minDelay) TimeLock(_minDelay) {}\\n\\n\\tfunction setFeeRegistry(address _registry) external itself {\\n\\t\\tfeeRegistry = _registry;\\n\\t}\\n\\n\\tfunction setRouter(address _router) external itself {\\n\\t\\trouter = _router;\\n\\t}\\n\\n\\tfunction setDistributor(address _distributor) external itself {\\n\\t\\tdistributor = _distributor;\\n\\t}\\n\\n\\tfunction setFactory(address _factory) external itself {\\n\\t\\tfactory = _factory;\\n\\t}\\n\\n\\tfunction setTreasury(address _treasury) external itself {\\n\\t\\ttreasury = _treasury;\\n\\t}\\n}\",\"keccak256\":\"0x4695a349a084b95e3fd202a535bb4daa4513fd41a7a76a851d0adc1f366a4cf5\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport {VaultAPI, BaseWrapper, RegistryAPI} from \\\"./wrapper/BaseWrapper.sol\\\";\\nimport {ApeVaultFactory} from \\\"./wrapper/ApeVaultFactory.sol\\\";\\nimport {ApeVaultWrapper} from \\\"./wrapper/ApeVault.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./TimeLock.sol\\\";\\n\\ncontract ApeRouter is TimeLock {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\n\\tuint256 constant MAX_UINT = type(uint256).max;\\n\\n\\taddress public yearnRegistry;\\n\\taddress public apeVaultFactory;\\n\\n\\tconstructor(address _reg, address _factory, uint256 _minDelay) TimeLock(_minDelay)  {\\n\\t\\tyearnRegistry = _reg;\\n\\t\\tapeVaultFactory = _factory;\\n\\t}\\n\\n\\tevent DepositInVault(address indexed vault, address token, uint256 amount);\\n\\tevent WithdrawFromVault(address indexed vault, address token, uint256 amount);\\n\\n\\tfunction delegateDeposit(address _apeVault, address _token, uint256 _amount) external returns(uint256 deposited) {\\n\\t\\tVaultAPI vault = VaultAPI(RegistryAPI(yearnRegistry).latestVault(_token));\\n\\t\\trequire(address(vault) != address(0), \\\"ApeRouter: No vault for token\\\");\\n\\t\\trequire(ApeVaultFactory(apeVaultFactory).vaultRegistry(_apeVault), \\\"ApeRouter: Vault does not exist\\\");\\n\\t\\trequire(address(vault) == address(ApeVaultWrapper(_apeVault).vault()), \\\"ApeRouter: yearn Vault not identical\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\tif (IERC20(_token).allowance(address(this), address(vault)) < _amount) {\\n            IERC20(_token).safeApprove(address(vault), 0); // Avoid issues with some IERC20(_token)s requiring 0\\n            IERC20(_token).safeApprove(address(vault), MAX_UINT); // Vaults are trusted\\n        }\\n\\n\\t\\tuint256 beforeBal = IERC20(_token).balanceOf(address(this));\\n        \\n\\t\\tuint256 sharesMinted = vault.deposit(_amount, _apeVault);\\n\\n        uint256 afterBal = IERC20(_token).balanceOf(address(this));\\n        deposited = beforeBal - afterBal;\\n        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\\n        // Issue a refund if not everything was deposited\\n\\n\\t\\t// adding protocol removal call\\n        //if (afterBal > 0) IERC20(_token).safeTransfer(msg.sender, afterBal);\\n\\n\\n\\t\\tApeVaultWrapper(_apeVault).addFunds(deposited);\\n\\t\\temit DepositInVault(_apeVault, _token, sharesMinted);\\n\\t}\\n\\n\\tfunction delegateWithdrawal(address _recipient, address _apeVault, address _token, uint256 _shareAmount, bool _underlying) external{\\n\\t\\tVaultAPI vault = VaultAPI(RegistryAPI(yearnRegistry).latestVault(_token));\\n\\t\\trequire(address(vault) != address(0), \\\"ApeRouter: No vault for token\\\");\\n\\t\\trequire(ApeVaultFactory(apeVaultFactory).vaultRegistry(msg.sender), \\\"ApeRouter: Vault does not exist\\\");\\n\\t\\trequire(address(vault) == address(ApeVaultWrapper(_apeVault).vault()), \\\"ApeRouter: yearn Vault not identical\\\");\\n\\n\\t\\tif (_underlying)\\n\\t\\t\\tvault.withdraw(_shareAmount, _recipient);\\n\\t\\telse\\n\\t\\t\\tvault.transfer(_recipient, _shareAmount);\\n\\t\\temit WithdrawFromVault(address(vault), vault.token(), _shareAmount);\\n\\t}\\n\\n\\tfunction removeTokens(address _token) external onlyOwner {\\n\\t\\tIERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\n\\t}\\n\\n\\t /**\\n     * @notice\\n     *  Used to update the yearn registry.\\n     * @param _registry The new _registry address.\\n     */\\n    function setRegistry(address _registry) external itself {\\n        yearnRegistry = _registry;\\n    }\\n}\",\"keccak256\":\"0x39d10160b1c6a4f7df0b5f380a218694263961e2b4b735877941c86564aa1c47\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/FeeRegistry.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"./TimeLock.sol\\\";\\n\\ncontract FeeRegistry is TimeLock(0){\\n\\tuint256 private constant _staticFee = 100; // 100 | MAX = 10000\\n\\tbool public on;\\n\\n\\tfunction activateFee() external itself {\\n\\t\\ton = true;\\n\\t}\\n\\n\\tfunction shutdownFee() external itself {\\n\\t\\ton = false;\\n\\t}\\n\\n\\tfunction staticFee() external view returns(uint256) {\\n\\t\\tif (!on)\\n\\t\\t\\treturn 0;\\n\\t\\treturn _staticFee;\\n\\t}\\n\\n\\tfunction getVariableFee(uint256 _yield, uint256 _tapTotal) external returns(uint256 variableFee) {\\n\\t\\tif (!on)\\n\\t\\t\\treturn 0;\\n\\t\\tuint256 yieldRatio = _yield * 1000 / _tapTotal;\\n\\t\\tuint256 baseFee = 100;\\n\\t\\tif (yieldRatio >= 900)\\n\\t\\t\\tvariableFee = baseFee;        // 1%     @ 90% profit\\n\\t\\telse if (yieldRatio >= 800)\\n\\t\\t\\tvariableFee = baseFee + 25;   // 1.25%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 700)\\n\\t\\t\\tvariableFee = baseFee + 50;   // 1.50%  @ 70% profit\\n\\t\\telse if (yieldRatio >= 600)\\n\\t\\t\\tvariableFee = baseFee + 75;   // 1.75%  @ 60% profit\\n\\t\\telse if (yieldRatio >= 500)\\n\\t\\t\\tvariableFee = baseFee + 100;  // 2.00%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 400)\\n\\t\\t\\tvariableFee = baseFee + 125;  // 2.25%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 300)\\n\\t\\t\\tvariableFee = baseFee + 150;  // 2.50%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 200)\\n\\t\\t\\tvariableFee = baseFee + 175;  // 2.75%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 100)\\n\\t\\t\\tvariableFee = baseFee + 200;  // 3.00%  @ 80% profit\\n\\t\\telse\\n\\t\\t\\tvariableFee = baseFee + 250;  // 3.50%  @ 0% profit\\n\\t}\\n}\\n\",\"keccak256\":\"0x65d52f4a21e66dea4f08e856e2ab9e67f5940e1ba8521f13e97cdebf3f1f11f9\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/TimeLock.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TimeLock is Ownable {\\n\\tuint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n\\tmapping(bytes32 => uint256) public timestamps;\\n\\tuint256 public minDelay;\\n\\n\\tevent CallScheduled(\\n        bytes32 indexed id,\\n        address target,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n\\tevent CallCancelled(bytes32 id);\\n\\n\\tevent CallExecuted(bytes32 indexed id, address target, bytes data);\\n\\n\\tconstructor(uint256 _minDelay) {\\n\\t\\tminDelay = _minDelay;\\n\\t}\\n\\n\\n\\tmodifier itself() {\\n\\t\\trequire(msg.sender == address(this), \\\"TimeLock: Caller is not contract itself\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction changeMinDelay(uint256 _min) external itself {\\n\\t\\tminDelay = _min;\\n\\t}\\n\\n\\tfunction hashOperation(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt) internal pure returns(bytes32) {\\n\\t\\treturn keccak256(abi.encode(_target, _data, _predecessor, _salt));\\n\\t}\\n\\n\\tfunction isPendingCall(bytes32 _id) public view returns(bool) {\\n\\t\\treturn timestamps[_id] > _DONE_TIMESTAMP;\\n\\t}\\n\\n\\tfunction isDoneCall(bytes32 _id) public view returns(bool) {\\n\\t\\treturn timestamps[_id] == _DONE_TIMESTAMP;\\n\\t}\\n\\n\\tfunction isReadyCall(bytes32 _id) public view returns(bool) {\\n\\t\\treturn timestamps[_id] <= block.timestamp;\\n\\t}\\n\\n\\tfunction schedule(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt, uint256 _delay) external onlyOwner {\\n\\t\\tbytes32 id = hashOperation(_target, _data, _predecessor, _salt);\\n\\t\\trequire(timestamps[id] == 0, \\\"TimeLock: Call already scheduled\\\");\\n\\t\\trequire(_delay >= minDelay, \\\"TimeLock: Insufficient delay\\\");\\n\\t\\ttimestamps[id] = block.timestamp + minDelay;\\n\\t\\temit CallScheduled(id, _target, _data, _predecessor, _delay);\\n\\t}\\n\\n\\tfunction cancel(bytes32 _id) external onlyOwner {\\n\\t\\trequire(isPendingCall(_id), \\\"TimeLock: Call is not pending\\\");\\n\\t\\ttimestamps[_id] = 0;\\n\\t\\temit CallCancelled(_id);\\n\\t}\\n\\n\\tfunction execute(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt, uint256 _delay) external onlyOwner {\\n\\t\\tbytes32 id = hashOperation(_target, _data, _predecessor, _salt);\\n\\t\\trequire(isReadyCall(id), \\\"TimeLock: Not ready for execution\\\");\\n\\t\\trequire(!isDoneCall(id), \\\"TimeLock: Already executed\\\");\\n\\t\\trequire(_predecessor == bytes32(0) || isDoneCall(_predecessor), \\\"TimeLock: Predecessor call not executed\\\");\\n\\t\\t_call(id, _target, _data);\\n\\t\\ttimestamps[id] = _DONE_TIMESTAMP;\\n\\t}\\n\\n\\tfunction _call(\\n        bytes32 id,\\n        address target,\\n        bytes calldata data\\n    ) internal {\\n        (bool success, ) = target.call(data);\\n        require(success, \\\"Timelock: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, target, data);\\n    }\\n\\n}\",\"keccak256\":\"0xdafdf98b99bba8a9cb8a465b32ec8029f48315f22c1b2df4071d297fcdb889c2\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVault.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../../interfaces/IApeVault.sol\\\";\\nimport \\\"../ApeDistributor.sol\\\";\\nimport \\\"../ApeAllowanceModule.sol\\\";\\nimport \\\"../ApeRegistry.sol\\\";\\nimport \\\"../FeeRegistry.sol\\\";\\nimport \\\"../ApeRouter.sol\\\";\\n\\nimport \\\"./BaseWrapper.sol\\\";\\n\\ncontract ApeVaultWrapper is BaseWrapper, Ownable {\\n\\tusing SafeERC20 for VaultAPI;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tuint256 constant TOTAL_SHARES = 10000;\\n\\t\\n\\tIERC20 public simpleToken;\\n\\n\\tmapping(address => bool) public hasAccess;\\n\\n\\tuint256 public underlyingValue;\\n\\taddress public apeRegistry;\\n\\tVaultAPI public vault;\\n\\tApeAllowanceModule public allowanceModule;\\n\\n\\tconstructor(\\n\\t\\taddress _apeRegistry,\\n\\t    address _token,\\n        address _registry,\\n\\t\\taddress _simpleToken) BaseWrapper(_token, _registry) {\\n\\t\\tapeRegistry = _apeRegistry;\\n\\t\\tif (_token != address(0))\\n\\t\\t\\tvault = VaultAPI(RegistryAPI(_registry).latestVault(_token));\\n\\t\\tsimpleToken = IERC20(_simpleToken);\\n\\t}\\n\\n\\tevent ApeVaultFundWithdrawal(address indexed apeVault, address vault, uint256 _amount, bool underlying);\\n\\n\\tmodifier onlyDistributor() {\\n\\t\\trequire(msg.sender == ApeRegistry(apeRegistry).distributor());\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyRouter() {\\n\\t\\trequire(msg.sender == ApeRegistry(apeRegistry).router());\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _shareValue(uint256 numShares) internal view returns (uint256) {\\n\\t\\treturn vault.pricePerShare() * numShares / (10**uint256(vault.decimals()));\\n    }\\n\\n    function _sharesForValue(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn amount * (10**uint256(vault.decimals())) / vault.pricePerShare();\\n    }\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to measure profits made compared to funds send to the vault\\n\\t * Returns 0 if negative\\n\\t */\\n\\tfunction profit() public view returns(uint256) {\\n\\t\\tuint256 totalValue = _shareValue(vault.balanceOf(address(this)));\\n\\t\\tif (totalValue <= underlyingValue)\\n\\t\\t\\treturn 0;\\n\\t\\telse\\n\\t\\t\\treturn totalValue - underlyingValue;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to withdraw non yield bearing tokens\\n\\t * @param _amount Amount of simpleToken to withdraw\\n\\t */\\n\\tfunction apeWithdrawSimpleToken(uint256 _amount) public {\\n\\t\\tsimpleToken.safeTransfer(msg.sender, _amount);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to withdraw yield bearing token\\n\\t * @param _shareAmount Amount of yield bearing token to withdraw\\n\\t * @param _underlying boolean to know if we redeem shares or not\\n\\t */\\n\\tfunction apeWithdraw(uint256 _shareAmount, bool _underlying) external onlyOwner {\\n\\t\\tuint256 underlyingAmount = _shareValue(_shareAmount);\\n\\t\\trequire(underlyingAmount <= underlyingValue, \\\"underlying amount higher than vault value\\\");\\n\\n\\t\\taddress router = ApeRegistry(apeRegistry).router();\\n\\t\\tunderlyingValue -= underlyingAmount;\\n\\t\\tvault.transfer(router, _shareAmount);\\n\\t\\tApeRouter(router).delegateWithdrawal(owner(), address(this), vault.token(), _shareAmount, _underlying);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to withdraw all yield bearing token\\n\\t * @param _underlying boolean to know if we redeem shares or not\\n\\t */\\n\\tfunction exitVaultToken(bool _underlying) external onlyOwner {\\n\\t\\tunderlyingValue = 0;\\n\\t\\tuint256 totalShares = vault.balanceOf(address(this));\\n\\t\\taddress router = ApeRegistry(apeRegistry).router();\\n\\t\\tvault.transfer(router, totalShares);\\n\\t\\tApeRouter(router).delegateWithdrawal(owner(), address(this), vault.token(), totalShares, _underlying);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to migrate yearn vault\\n\\t */\\n\\tfunction apeMigrate() external onlyOwner returns(uint256 migrated){\\n\\t\\tmigrated = _migrate(address(this));\\n\\t\\tvault = VaultAPI(registry.latestVault(address(token)));\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to take funds from vault into the distributor (can only be called by distributor)\\n\\t * @param _value Amount of funds to take\\n\\t * @param _type The type of tap performed on the vault\\n\\t */\\n\\tfunction tap(uint256 _value, uint8 _type) external onlyDistributor returns(uint256) {\\n\\t\\tif (_type == uint8(0)) {\\n\\t\\t\\t_tapOnlyProfit(_value, msg.sender);\\n\\t\\t\\treturn _value;\\n\\t\\t}\\n\\t\\telse if (_type == uint8(1)) {\\n\\t\\t\\t_tapBase(_value, msg.sender);\\n\\t\\t\\treturn _value;\\n\\t\\t}\\n\\t\\telse if (_type == uint8(2))\\n\\t\\t\\t_tapSimpleToken(_value, msg.sender);\\n\\t\\treturn (0);\\n\\t}\\n\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to take funds from vault purely from profit made from yearn yield\\n\\t * @param _tapValue Amount of funds to take\\n\\t * @param _recipient recipient of funds (always distributor)\\n\\t */\\n\\tfunction _tapOnlyProfit(uint256 _tapValue, address _recipient) internal {\\n\\t\\tuint256 fee = FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).getVariableFee(_tapValue, _tapValue);\\n\\t\\tuint256 finalTapValue = _tapValue + _tapValue * fee / TOTAL_SHARES;\\n\\t\\trequire(_shareValue(finalTapValue) <= profit(), \\\"Not enough profit to cover epoch\\\");\\n\\t\\tvault.safeTransfer(_recipient, _tapValue);\\n\\t\\tvault.safeTransfer(ApeRegistry(apeRegistry).treasury(), _tapValue * fee / TOTAL_SHARES);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to take funds from vault by deducting a part from profits\\n\\t * @param _tapValue Amount of funds to take\\n\\t * @param _recipient recipient of funds (always distributor)\\n\\t */\\n\\tfunction _tapBase(uint256 _tapValue, address _recipient) internal {\\n\\t\\tuint256 underlyingTapValue = _shareValue(_tapValue);\\n\\t\\tuint256 profit_ = profit();\\n\\t\\tuint256 fee = FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).getVariableFee(profit_, underlyingTapValue);\\n\\t\\tuint256 finalTapValue = underlyingTapValue + underlyingTapValue * fee / TOTAL_SHARES;\\n\\t\\tif (finalTapValue > profit_)\\n\\t\\t\\tunderlyingValue -= finalTapValue - profit_;\\n\\t\\tvault.transfer(_recipient, _tapValue);\\n\\t\\tvault.transfer(ApeRegistry(apeRegistry).treasury(), _tapValue * fee / TOTAL_SHARES);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to take funds simple token\\n\\t * @param _tapValue Amount of funds to take\\n\\t * @param _recipient recipient of funds (always distributor)\\n\\t */\\n\\tfunction _tapSimpleToken(uint256 _tapValue, address _recipient) internal {\\n\\t\\tuint256 feeAmount = _tapValue * FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).staticFee() / TOTAL_SHARES;\\n\\t\\tsimpleToken.transfer(_recipient, _tapValue);\\n\\t\\tsimpleToken.transfer(ApeRegistry(apeRegistry).treasury(), feeAmount);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to correct change the amount of underlying funds held by the ape Vault\\n\\t */\\n\\tfunction syncUnderlying() external onlyOwner {\\n\\t\\tunderlyingValue = _shareValue(vault.balanceOf(address(this)));\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to add the correct amount of funds from the router, only callable by router\\n\\t * @param _amount amount of undelrying funds to add\\n\\t */\\n\\tfunction addFunds(uint256 _amount) external onlyRouter {\\n\\t\\tunderlyingValue += _amount;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to approve an admin to fund/finalise epochs from this vault to a specific circle\\n\\t * @param _circle Circle who will benefit from this vault\\n\\t * @param _admin address that can finalise epochs\\n\\t */\\n\\tfunction approveCircleAdmin(bytes32 _circle, address _admin) external onlyOwner {\\n\\t\\tApeDistributor(ApeRegistry(apeRegistry).distributor()).updateCircleAdmin(_circle, _admin);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update the allowance of a circle that the vault funds\\n\\t * @param _circle Circle who will benefit from this vault\\n\\t * @param _amount Max amount of funds available per epoch\\n\\t * @param _interval Seconds in between each epochs\\n\\t * @param _epochAmount Amount of epochs to fund (0 means you're at least funding one epoch)\\n\\t * If you want to stop funding a circle, set _amount to 0\\n\\t */\\n\\tfunction updateAllowance(\\n\\t\\tbytes32 _circle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _interval,\\n\\t\\tuint256 _epochAmount\\n\\t\\t) external onlyOwner {\\n\\t\\tApeDistributor(\\n\\t\\t\\tApeRegistry(apeRegistry).distributor()\\n\\t\\t).setAllowance(_circle, _token, _amount, _interval, _epochAmount);\\n\\t}\\n}\",\"keccak256\":\"0x6c0e6d7f27ced12b7ed9f08054e1c92d72aa07ce546f1f2086a51cc39f7c4301\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVaultFactory.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"./ApeVault.sol\\\";\\n\\ncontract ApeVaultFactory {\\n\\tmapping(address => bool) public vaultRegistry;\\n\\n\\taddress public yearnRegistry;\\n\\taddress public apeRegistry;\\n\\n\\tevent VaultCreated(address vault);\\n\\n\\tconstructor(address _reg, address _apeReg) {\\n\\t\\tapeRegistry = _apeReg;\\n\\t\\tyearnRegistry = _reg;\\n\\t}\\n\\n\\tfunction createApeVault(address _token, address _simpleToken) external {\\n\\t\\tApeVaultWrapper vault = new ApeVaultWrapper(apeRegistry, _token, yearnRegistry, _simpleToken);\\n\\t\\tvault.transferOwnership(msg.sender);\\n\\t\\tvaultRegistry[address(vault)] = true;\\n\\t\\temit VaultCreated(address(vault));\\n\\t}\\n}\",\"keccak256\":\"0x051755ef7a60daf095216633deed13089c6bd9587e6256753f338f9a6f3181ed\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/BaseWrapper.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct StrategyParams {\\n    uint256 performanceFee;\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 minDebtPerHarvest;\\n    uint256 maxDebtPerHarvest;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n}\\n\\ninterface VaultAPI is IERC20 {\\n    function name() external view returns (string calldata);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function apiVersion() external pure returns (string memory);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n    function deposit() external returns (uint256);\\n\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    function deposit(uint256 amount, address recipient) external returns (uint256);\\n\\n    // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n    function withdraw() external returns (uint256);\\n\\n    function withdraw(uint256 maxShares) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function depositLimit() external view returns (uint256);\\n\\n    function maxAvailableShares() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would increase this Strategy's borrow limit,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would like to pull back from the Strategy,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function debtOutstanding() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault expect this Strategy to return at the current\\n     * block, based on its present performance (since its last report). Can be\\n     * used to determine expectedReturn in your Strategy.\\n     */\\n    function expectedReturn() external view returns (uint256);\\n\\n    /**\\n     * This is the main contact point where the Strategy interacts with the\\n     * Vault. It is critical that this call is handled as intended by the\\n     * Strategy. Therefore, this function will be called by BaseStrategy to\\n     * make sure the integration is correct.\\n     */\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    /**\\n     * This function should only be used in the scenario where the Strategy is\\n     * being retired but no migration of the positions are possible, or in the\\n     * extreme scenario that the Strategy needs to be put into \\\"Emergency Exit\\\"\\n     * mode in order for it to exit as quickly as possible. The latter scenario\\n     * could be for any reason that is considered \\\"critical\\\" that the Strategy\\n     * exits its position as fast as possible, such as a sudden change in\\n     * market conditions leading to losses, or an imminent failure in an\\n     * external dependency.\\n     */\\n    function revokeStrategy() external;\\n\\n    /**\\n     * View the governance address of the Vault to assert privileged functions\\n     * can only be called by governance. The Strategy serves the Vault, so it\\n     * is subject to governance defined by the Vault.\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * View the management address of the Vault to assert privileged functions\\n     * can only be called by management. The Strategy serves the Vault, so it\\n     * is subject to management defined by the Vault.\\n     */\\n    function management() external view returns (address);\\n\\n    /**\\n     * View the guardian address of the Vault to assert privileged functions\\n     * can only be called by guardian. The Strategy serves the Vault, so it\\n     * is subject to guardian defined by the Vault.\\n     */\\n    function guardian() external view returns (address);\\n}\\n\\n\\ninterface RegistryAPI {\\n    function governance() external view returns (address);\\n\\n    function latestVault(address token) external view returns (address);\\n\\n    function numVaults(address token) external view returns (uint256);\\n\\n    function vaults(address token, uint256 deploymentId) external view returns (address);\\n}\\n\\n/**\\n * @title Yearn Base Wrapper\\n * @author yearn.finance\\n * @notice\\n *  BaseWrapper implements all of the required functionality to interoperate\\n *  closely with the Vault contract. This contract should be inherited and the\\n *  abstract methods implemented to adapt the Wrapper.\\n *  A good starting point to build a wrapper is https://github.com/yearn/brownie-wrapper-mix\\n *\\n */\\nabstract contract BaseWrapper {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token;\\n\\n    // Reduce number of external calls (SLOADs stay the same)\\n    VaultAPI[] private _cachedVaults;\\n\\n    RegistryAPI public registry;\\n\\n    // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\\n    uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\\n    // Sentinal values used to save gas on deposit/withdraw/migrate\\n    // NOTE: DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING\\n    uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\\n    uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\\n    uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\\n    // VaultsAPI.depositLimit is unlimited\\n    uint256 constant UNCAPPED_DEPOSITS = type(uint256).max;\\n\\n    constructor(address _token, address _registry) {\\n        // Recommended to use a token with a `Registry.latestVault(_token) != address(0)`\\n        token = IERC20(_token);\\n        // Recommended to use `v2.registry.ychad.eth`\\n        registry = RegistryAPI(_registry);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to update the yearn registry.\\n     * @param _registry The new _registry address.\\n     */\\n    function setRegistry(address _registry) external {\\n        require(msg.sender == registry.governance());\\n        // In case you want to override the registry instead of re-deploying\\n        registry = RegistryAPI(_registry);\\n        // Make sure there's no change in governance\\n        // NOTE: Also avoid bricking the wrapper from setting a bad registry\\n        require(msg.sender == registry.governance());\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the most revent vault for the token using the registry.\\n     * @return An instance of a VaultAPI\\n     */\\n    function bestVault() public view virtual returns (VaultAPI) {\\n        return VaultAPI(registry.latestVault(address(token)));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get all vaults from the registery for the token\\n     * @return An array containing instances of VaultAPI\\n     */\\n    function allVaults() public view virtual returns (VaultAPI[] memory) {\\n        uint256 cache_length = _cachedVaults.length;\\n        uint256 num_vaults = registry.numVaults(address(token));\\n\\n        // Use cached\\n        if (cache_length == num_vaults) {\\n            return _cachedVaults;\\n        }\\n\\n        VaultAPI[] memory vaults = new VaultAPI[](num_vaults);\\n\\n        for (uint256 vault_id = 0; vault_id < cache_length; vault_id++) {\\n            vaults[vault_id] = _cachedVaults[vault_id];\\n        }\\n\\n        for (uint256 vault_id = cache_length; vault_id < num_vaults; vault_id++) {\\n            vaults[vault_id] = VaultAPI(registry.vaults(address(token), vault_id));\\n        }\\n\\n        return vaults;\\n    }\\n\\n    function _updateVaultCache(VaultAPI[] memory vaults) internal {\\n        // NOTE: even though `registry` is update-able by Yearn, the intended behavior\\n        //       is that any future upgrades to the registry will replay the version\\n        //       history so that this cached value does not get out of date.\\n        if (vaults.length > _cachedVaults.length) {\\n            _cachedVaults = vaults;\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the balance of an account accross all the vaults for a token.\\n     *  @dev will be used to get the wrapper balance using totalVaultBalance(address(this)).\\n     *  @param account The address of the account.\\n     *  @return balance of token for the account accross all the vaults.\\n     */\\n    function totalVaultBalance(address account) public view returns (uint256 balance) {\\n        VaultAPI[] memory vaults = allVaults();\\n\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            balance = balance.add(vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals())));\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the TVL on the underlying vaults.\\n     *  @return assets the sum of all the assets managed by the underlying vaults.\\n     */\\n    function totalAssets() public view returns (uint256 assets) {\\n        VaultAPI[] memory vaults = allVaults();\\n\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            assets = assets.add(vaults[id].totalAssets());\\n        }\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        address receiver,\\n        uint256 amount, // if `MAX_UINT256`, just deposit everything\\n        bool pullFunds // If true, funds need to be pulled from `depositor` via `transferFrom`\\n    ) internal returns (uint256 deposited) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        if (pullFunds) {\\n            if (amount != DEPOSIT_EVERYTHING) {\\n                token.safeTransferFrom(depositor, address(this), amount);\\n            } else {\\n                token.safeTransferFrom(depositor, address(this), token.balanceOf(depositor));\\n            }\\n        }\\n\\n        if (token.allowance(address(this), address(_bestVault)) < amount) {\\n            token.safeApprove(address(_bestVault), 0); // Avoid issues with some tokens requiring 0\\n            token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\\n        }\\n\\n        // Depositing returns number of shares deposited\\n        // NOTE: Shortcut here is assuming the number of tokens deposited is equal to the\\n        //       number of shares credited, which helps avoid an occasional multiplication\\n        //       overflow if trying to adjust the number of shares by the share price.\\n        uint256 beforeBal = token.balanceOf(address(this));\\n        if (receiver != address(this)) {\\n            _bestVault.deposit(amount, receiver);\\n        } else if (amount != DEPOSIT_EVERYTHING) {\\n            _bestVault.deposit(amount);\\n        } else {\\n            _bestVault.deposit();\\n        }\\n\\n        uint256 afterBal = token.balanceOf(address(this));\\n        deposited = beforeBal.sub(afterBal);\\n        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\\n        // Issue a refund if not everything was deposited\\n        if (depositor != address(this) && afterBal > 0) token.safeTransfer(depositor, afterBal);\\n    }\\n\\n    function _withdraw(\\n        address sender,\\n        address receiver,\\n        uint256 amount, // if `MAX_UINT256`, just withdraw everything\\n        bool withdrawFromBest // If true, also withdraw from `_bestVault`\\n    ) internal returns (uint256 withdrawn) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        VaultAPI[] memory vaults = allVaults();\\n        _updateVaultCache(vaults);\\n\\n        // NOTE: This loop will attempt to withdraw from each Vault in `allVaults` that `sender`\\n        //       is deposited in, up to `amount` tokens. The withdraw action can be expensive,\\n        //       so it if there is a denial of service issue in withdrawing, the downstream usage\\n        //       of this wrapper contract must give an alternative method of withdrawing using\\n        //       this function so that `amount` is less than the full amount requested to withdraw\\n        //       (e.g. \\\"piece-wise withdrawals\\\"), leading to less loop iterations such that the\\n        //       DoS issue is mitigated (at a tradeoff of requiring more txns from the end user).\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            if (!withdrawFromBest && vaults[id] == _bestVault) {\\n                continue; // Don't withdraw from the best\\n            }\\n\\n            // Start with the total shares that `sender` has\\n            uint256 availableShares = vaults[id].balanceOf(sender);\\n\\n            // Restrict by the allowance that `sender` has to this contract\\n            // NOTE: No need for allowance check if `sender` is this contract\\n            if (sender != address(this)) {\\n                availableShares = Math.min(availableShares, vaults[id].allowance(sender, address(this)));\\n            }\\n\\n            // Limit by maximum withdrawal size from each vault\\n            availableShares = Math.min(availableShares, vaults[id].maxAvailableShares());\\n\\n            if (availableShares > 0) {\\n                // Intermediate step to move shares to this contract before withdrawing\\n                // NOTE: No need for share transfer if this contract is `sender`\\n                if (sender != address(this)) vaults[id].transferFrom(sender, address(this), availableShares);\\n\\n                if (amount != WITHDRAW_EVERYTHING) {\\n                    // Compute amount to withdraw fully to satisfy the request\\n                    uint256 estimatedShares =\\n                        amount\\n                            .sub(withdrawn) // NOTE: Changes every iteration\\n                            .mul(10**uint256(vaults[id].decimals()))\\n                            .div(vaults[id].pricePerShare()); // NOTE: Every Vault is different\\n\\n                    // Limit amount to withdraw to the maximum made available to this contract\\n                    // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\\n                    // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\\n                    if (estimatedShares > 0 && estimatedShares < availableShares) {\\n                        withdrawn = withdrawn.add(vaults[id].withdraw(estimatedShares));\\n                    } else {\\n                        withdrawn = withdrawn.add(vaults[id].withdraw(availableShares));\\n                    }\\n                } else {\\n                    withdrawn = withdrawn.add(vaults[id].withdraw());\\n                }\\n\\n                // Check if we have fully satisfied the request\\n                // NOTE: use `amount = WITHDRAW_EVERYTHING` for withdrawing everything\\n                if (amount <= withdrawn) break; // withdrawn as much as we needed\\n            }\\n        }\\n\\n        // If we have extra, deposit back into `_bestVault` for `sender`\\n        // NOTE: Invariant is `withdrawn <= amount`\\n        if (withdrawn > amount && withdrawn.sub(amount) > _bestVault.pricePerShare().div(10**_bestVault.decimals())) {\\n            // Don't forget to approve the deposit\\n            if (token.allowance(address(this), address(_bestVault)) < withdrawn.sub(amount)) {\\n                token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\\n            }\\n\\n            _bestVault.deposit(withdrawn.sub(amount), sender);\\n            withdrawn = amount;\\n        }\\n\\n        // `receiver` now has `withdrawn` tokens as balance\\n        if (receiver != address(this)) token.safeTransfer(receiver, withdrawn);\\n    }\\n\\n    function _migrate(address account) internal returns (uint256) {\\n        return _migrate(account, MIGRATE_EVERYTHING);\\n    }\\n\\n    function _migrate(address account, uint256 amount) internal returns (uint256) {\\n        // NOTE: In practice, it was discovered that <50 was the maximum we've see for this variance\\n        return _migrate(account, amount, 0);\\n    }\\n\\n    function _migrate(\\n        address account,\\n        uint256 amount,\\n        uint256 maxMigrationLoss\\n    ) internal returns (uint256 migrated) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        // NOTE: Only override if we aren't migrating everything\\n        uint256 _depositLimit = _bestVault.depositLimit();\\n        uint256 _totalAssets = _bestVault.totalAssets();\\n        if (_depositLimit <= _totalAssets) return 0; // Nothing to migrate (not a failure)\\n\\n        uint256 _amount = amount;\\n        if (_depositLimit < UNCAPPED_DEPOSITS && _amount < WITHDRAW_EVERYTHING) {\\n            // Can only deposit up to this amount\\n            uint256 _depositLeft = _depositLimit.sub(_totalAssets);\\n            if (_amount > _depositLeft) _amount = _depositLeft;\\n        }\\n\\n        if (_amount > 0) {\\n            // NOTE: `false` = don't withdraw from `_bestVault`\\n            uint256 withdrawn = _withdraw(account, address(this), _amount, false);\\n            if (withdrawn == 0) return 0; // Nothing to migrate (not a failure)\\n\\n            // NOTE: `false` = don't do `transferFrom` because it's already local\\n            migrated = _deposit(address(this), account, withdrawn, false);\\n            // NOTE: Due to the precision loss of certain calculations, there is a small inefficency\\n            //       on how migrations are calculated, and this could lead to a DoS issue. Hence, this\\n            //       value is made to be configurable to allow the user to specify how much is acceptable\\n            require(withdrawn.sub(migrated) <= maxMigrationLoss);\\n        } // else: nothing to migrate! (not a failure)\\n    }\\n}\",\"keccak256\":\"0x7c420094b590261868e4af753fe2cd7f013db80b36a89be1e74eaae67190b3f1\"},\"contracts/coordinape-protocol/interfaces/IApeVault.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\ninterface IApeVault {\\n\\tfunction tap(uint256 _tapValue, uint256 _slippage, uint8 _type) external;\\n}\",\"keccak256\":\"0x3f167ed48d15bae7d34857fa07fa4990690ef71e9b87f28fac26bb076ce041ba\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613ecb380380613ecb83398101604081905261002f9161007f565b600280546001600160a01b039283166001600160a01b031991821617909155600180549390921692169190911790556100b1565b80516001600160a01b038116811461007a57600080fd5b919050565b60008060408385031215610091578182fd5b61009a83610063565b91506100a860208401610063565b90509250929050565b613e0b806100c06000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632635aec2146100515780635487beb614610066578063b9c4b4961461009e578063bb870317146100be575b600080fd5b61006461005f366004610249565b6100d1565b005b610089610074366004610228565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6002546100b1906001600160a01b031681565b604051610095919061027b565b6001546100b1906001600160a01b031681565b6002546001546040516000926001600160a01b0390811692869291169085906100f9906101ff565b6001600160a01b039485168152928416602084015290831660408301529091166060820152608001604051809103906000f08015801561013d573d6000803e3d6000fd5b5060405163f2fde38b60e01b81529091506001600160a01b0382169063f2fde38b9061016d90339060040161027b565b600060405180830381600087803b15801561018757600080fd5b505af115801561019b573d6000803e3d6000fd5b5050506001600160a01b03821660009081526020819052604090819020805460ff19166001179055517f2e49a5810fda2439a23771848b4acec786b0a64d4de3d124ac57fc8739c3887591506101f290839061027b565b60405180910390a1505050565b613b468061029083390190565b80356001600160a01b038116811461022357600080fd5b919050565b600060208284031215610239578081fd5b6102428261020c565b9392505050565b6000806040838503121561025b578081fd5b6102648361020c565b91506102726020840161020c565b90509250929050565b6001600160a01b039190911681526020019056fe60806040523480156200001157600080fd5b5060405162003b4638038062003b468339810160408190526200003491620001f9565b600080546001600160a01b038086166001600160a01b031992831617909255600280549285169290911691909117905562000076620000703390565b62000166565b600780546001600160a01b0319166001600160a01b03868116919091179091558316156200013c57604051630e177dc760e41b81526001600160a01b03848116600483015283169063e177dc709060240160206040518083038186803b158015620000e057600080fd5b505afa158015620000f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011b9190620001d5565b600880546001600160a01b0319166001600160a01b03929092169190911790555b600480546001600160a01b0319166001600160a01b03929092169190911790555062000255915050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620001d057600080fd5b919050565b600060208284031215620001e7578081fd5b620001f282620001b8565b9392505050565b600080600080608085870312156200020f578283fd5b6200021a85620001b8565b93506200022a60208601620001b8565b92506200023a60408601620001b8565b91506200024a60608601620001b8565b905092959194509250565b6138e180620002656000396000f3fe608060405234801561001057600080fd5b506004361061013d5760003560e01c80628bd5691461014257806301e1d11414610157578063063effeb146101725780631963e7f8146101875780632a64e6351461019a57806330e5065e146101ba57806331be3a60146101cd578063335df652146101e057806344552b5f146101f357806366d16cc3146101fb578063715018a6146102035780637b1039991461020b5780638c3268761461021e5780638da5cb5b1461022757806395a078e81461022f578063a91ee0dc14610262578063b9c4b49614610275578063be99970514610288578063c70245c21461029b578063e95b2de8146102ae578063eac9b92c146102b6578063f030d912146102c9578063f2fde38b146102dc578063f5c16af3146102ef578063fbfa77cf146102f7578063fc0c546a1461030a575b600080fd5b61015561015036600461342f565b61031d565b005b61015f61043e565b6040519081526020015b60405180910390f35b61017a610512565b60405161016991906135dd565b6101556101953660046134d5565b6107d9565b6004546101ad906001600160a01b031681565b604051610169919061353e565b61015f6101c83660046133bf565b610a81565b6101556101db3660046133f7565b610ca8565b6101556101ee3660046134a5565b610f5a565b610155610f74565b61015f61102f565b610155611094565b6002546101ad906001600160a01b031681565b61015f60065481565b6101ad6110cf565b61025261023d3660046133bf565b60056020526000908152604090205460ff1681565b6040519015158152602001610169565b6101556102703660046133bf565b6110de565b6007546101ad906001600160a01b031681565b6101556102963660046134a5565b611232565b6101556102a936600461345e565b6112ef565b6101ad611424565b6009546101ad906001600160a01b031681565b61015f6102d73660046134f9565b6114af565b6101556102ea3660046133bf565b611598565b61015f611635565b6008546101ad906001600160a01b031681565b6000546101ad906001600160a01b031681565b336103266110cf565b6001600160a01b0316146103555760405162461bcd60e51b815260040161034c90613674565b60405180910390fd5b600760009054906101000a90046001600160a01b03166001600160a01b031663bfe109286040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a357600080fd5b505afa1580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db91906133db565b6001600160a01b0316633a5d5a3983836040518363ffffffff1660e01b815260040161040892919061362a565b600060405180830381600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b505050505050565b600080610449610512565b905060005b815181101561050d576104f982828151811061047a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ba57600080fd5b505afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f291906134bd565b8490611718565b92508061050581613857565b91505061044e565b505090565b6001546002546000805460405163f9c7bba560e01b8152606094936001600160a01b039081169263f9c7bba59261054f929091169060040161353e565b60206040518083038186803b15801561056757600080fd5b505afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906134bd565b90508082141561060d5760018054806020026020016040519081016040528092919081815260200182805480156105ff57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105e1575b5050505050925050506107d6565b6000816001600160401b0381111561063557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561065e578160200160208202803683370190505b50905060005b838110156106f5576001818154811061068d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168282815181106106cb57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806106ed81613857565b915050610664565b50825b828110156107d057600254600054604051633ddfe34f60e11b81526001600160a01b0392831692637bbfc69e926107369291169085906004016135c4565b60206040518083038186803b15801561074e57600080fd5b505afa158015610762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078691906133db565b8282815181106107a657634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806107c881613857565b9150506106f8565b50925050505b90565b336107e26110cf565b6001600160a01b0316146108085760405162461bcd60e51b815260040161034c90613674565b60006108138361172b565b90506006548111156108795760405162461bcd60e51b815260206004820152602960248201527f756e6465726c79696e6720616d6f756e7420686967686572207468616e207661604482015268756c742076616c756560b81b606482015260840161034c565b600754604080516303e21fa960e61b815290516000926001600160a01b03169163f887ea40916004808301926020929190829003018186803b1580156108be57600080fd5b505afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f691906133db565b9050816006600082825461090a9190613814565b909155505060085460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061094190849088906004016135c4565b602060405180830381600087803b15801561095b57600080fd5b505af115801561096f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109939190613413565b50806001600160a01b031663499ab9766109ab6110cf565b60085460408051637e062a3560e11b8152905130926001600160a01b03169163fc0c546a916004808301926020929190829003018186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2791906133db565b88886040518663ffffffff1660e01b8152600401610a4995949392919061356c565b600060405180830381600087803b158015610a6357600080fd5b505af1158015610a77573d6000803e3d6000fd5b5050505050505050565b600080610a8c610512565b905060005b8151811015610ca157610c8d6104f2838381518110610ac057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0057600080fd5b505afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3891906134bd565b610b4390600a613727565b610c87858581518110610b6657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde91906134bd565b868681518110610bfe57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b8152600401610c31919061353e565b60206040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8191906134bd565b90611843565b9061184f565b925080610c9981613857565b915050610a91565b5050919050565b33610cb16110cf565b6001600160a01b031614610cd75760405162461bcd60e51b815260040161034c90613674565b600060068190556008546040516370a0823160e01b81526001600160a01b03909116906370a0823190610d0e90309060040161353e565b60206040518083038186803b158015610d2657600080fd5b505afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e91906134bd565b90506000600760009054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de891906133db565b60085460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610e1b90849086906004016135c4565b602060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6d9190613413565b50806001600160a01b031663499ab976610e856110cf565b60085460408051637e062a3560e11b8152905130926001600160a01b03169163fc0c546a916004808301926020929190829003018186803b158015610ec957600080fd5b505afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0191906133db565b86886040518663ffffffff1660e01b8152600401610f2395949392919061356c565b600060405180830381600087803b158015610f3d57600080fd5b505af1158015610f51573d6000803e3d6000fd5b50505050505050565b600454610f71906001600160a01b0316338361185b565b50565b33610f7d6110cf565b6001600160a01b031614610fa35760405162461bcd60e51b815260040161034c90613674565b6008546040516370a0823160e01b815261102a916001600160a01b0316906370a0823190610fd590309060040161353e565b60206040518083038186803b158015610fed57600080fd5b505afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102591906134bd565b61172b565b600655565b6008546040516370a0823160e01b81526000918291611066916001600160a01b0316906370a0823190610fd590309060040161353e565b9050600654811161107b5760009150506107d6565b6006546110889082613814565b9150506107d6565b5090565b3361109d6110cf565b6001600160a01b0316146110c35760405162461bcd60e51b815260040161034c90613674565b6110cd60006118b6565b565b6003546001600160a01b031690565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116491906133db565b6001600160a01b0316336001600160a01b03161461118157600080fd5b600280546001600160a01b0319166001600160a01b03838116919091179182905560408051635aa6e67560e01b815290519290911691635aa6e67591600480820192602092909190829003018186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121591906133db565b6001600160a01b0316336001600160a01b031614610f7157600080fd5b600760009054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b891906133db565b6001600160a01b0316336001600160a01b0316146112d557600080fd5b80600660008282546112e791906136a9565b909155505050565b336112f86110cf565b6001600160a01b03161461131e5760405162461bcd60e51b815260040161034c90613674565b600760009054906101000a90046001600160a01b03166001600160a01b031663bfe109286040518163ffffffff1660e01b815260040160206040518083038186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a491906133db565b6040516372b9edeb60e11b8152600481018790526001600160a01b038681166024830152604482018690526064820185905260848201849052919091169063e573dbd69060a401600060405180830381600087803b15801561140557600080fd5b505af1158015611419573d6000803e3d6000fd5b505050505050505050565b60025460008054604051630e177dc760e41b815291926001600160a01b039081169263e177dc709261145a92169060040161353e565b60206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa91906133db565b905090565b600754604080516317fc212560e31b815290516000926001600160a01b03169163bfe10928916004808301926020929190829003018186803b1580156114f457600080fd5b505afa158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c91906133db565b6001600160a01b0316336001600160a01b03161461154957600080fd5b60ff82166115625761155b8333611908565b5081611592565b60ff8216600114156115785761155b8333611b53565b60ff82166002141561158e5761158e8333611e59565b5060005b92915050565b336115a16110cf565b6001600160a01b0316146115c75760405162461bcd60e51b815260040161034c90613674565b6001600160a01b03811661162c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034c565b610f71816118b6565b6000336116406110cf565b6001600160a01b0316146116665760405162461bcd60e51b815260040161034c90613674565b61166f306120e5565b600254600054604051630e177dc760e41b81529293506001600160a01b039182169263e177dc70926116a592169060040161353e565b60206040518083038186803b1580156116bd57600080fd5b505afa1580156116d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f591906133db565b600880546001600160a01b0319166001600160a01b039290921691909117905590565b600061172482846136a9565b9392505050565b6008546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a891906134bd565b6117b390600a613727565b60085460408051634ca9858360e11b8152905185926001600160a01b0316916399530b06916004808301926020929190829003018186803b1580156117f757600080fd5b505afa15801561180b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182f91906134bd565b61183991906137f5565b61159291906136c1565b600061172482846137f5565b600061172482846136c1565b6118b18363a9059cbb60e01b848460405160240161187a9291906135c4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526120f3565b505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60075460408051631674811760e31b815290516000926001600160a01b03169163b3a408b8916004808301926020929190829003018186803b15801561194d57600080fd5b505afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198591906133db565b604051636a89e82d60e01b815260048101859052602481018590526001600160a01b039190911690636a89e82d90604401602060405180830381600087803b1580156119d057600080fd5b505af11580156119e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0891906134bd565b90506000612710611a1983866137f5565b611a2391906136c1565b611a2d90856136a9565b9050611a3761102f565b611a408261172b565b1115611a8e5760405162461bcd60e51b815260206004820181905260248201527f4e6f7420656e6f7567682070726f66697420746f20636f7665722065706f6368604482015260640161034c565b600854611aa5906001600160a01b0316848661185b565b600754604080516361d027b360e01b81529051611b4d926001600160a01b0316916361d027b3916004808301926020929190829003018186803b158015611aeb57600080fd5b505afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2391906133db565b612710611b3085886137f5565b611b3a91906136c1565b6008546001600160a01b0316919061185b565b50505050565b6000611b5e8361172b565b90506000611b6a61102f565b90506000600760009054906101000a90046001600160a01b03166001600160a01b031663b3a408b86040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbc57600080fd5b505afa158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf491906133db565b604051636a89e82d60e01b815260048101849052602481018590526001600160a01b039190911690636a89e82d90604401602060405180830381600087803b158015611c3f57600080fd5b505af1158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7791906134bd565b90506000612710611c8883866137f5565b611c9291906136c1565b611c9c90856136a9565b905082811115611cc757611cb08382613814565b60066000828254611cc19190613814565b90915550505b60085460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611cf99088908a906004016135c4565b602060405180830381600087803b158015611d1357600080fd5b505af1158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190613413565b50600854600754604080516361d027b360e01b815290516001600160a01b039384169363a9059cbb9316916361d027b3916004808301926020929190829003018186803b158015611d9b57600080fd5b505afa158015611daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd391906133db565b612710611de0868b6137f5565b611dea91906136c1565b6040518363ffffffff1660e01b8152600401611e079291906135c4565b602060405180830381600087803b158015611e2157600080fd5b505af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f519190613413565b6000612710600760009054906101000a90046001600160a01b03166001600160a01b031663b3a408b86040518163ffffffff1660e01b815260040160206040518083038186803b158015611eac57600080fd5b505afa158015611ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee491906133db565b6001600160a01b031663231051b46040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1c57600080fd5b505afa158015611f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5491906134bd565b611f5e90856137f5565b611f6891906136c1565b6004805460405163a9059cbb60e01b81529293506001600160a01b03169163a9059cbb91611f9a9186918891016135c4565b602060405180830381600087803b158015611fb457600080fd5b505af1158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec9190613413565b5060048054600754604080516361d027b360e01b815290516001600160a01b039384169463a9059cbb94909316926361d027b392808201926020929091829003018186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207591906133db565b836040518363ffffffff1660e01b81526004016120939291906135c4565b602060405180830381600087803b1580156120ad57600080fd5b505af11580156120c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4d9190613413565b6000611592826000196121c5565b6000612148826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121d39092919063ffffffff16565b8051909150156118b157808060200190518101906121669190613413565b6118b15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161034c565b6000611724838360006121ea565b60606121e28484600085612384565b949350505050565b6000806121f5611424565b90506000816001600160a01b031663ecf708586040518163ffffffff1660e01b815260040160206040518083038186803b15801561223257600080fd5b505afa158015612246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226a91906134bd565b90506000826001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156122a757600080fd5b505afa1580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122df91906134bd565b90508082116122f45760009350505050611724565b8560001983108015612307575060001981105b1561232857600061231884846124ac565b905080821115612326578091505b505b801561237957600061233d89308460006124b8565b90508061235257600095505050505050611724565b61235f308a836000612d88565b95508661236c82886124ac565b111561237757600080fd5b505b505050509392505050565b6060824710156123e55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161034c565b843b6124335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161034c565b600080866001600160a01b0316858760405161244f9190613522565b60006040518083038185875af1925050503d806000811461248c576040519150601f19603f3d011682016040523d82523d6000602084013e612491565b606091505b50915091506124a18282866131aa565b979650505050505050565b60006117248284613814565b6000806124c3611424565b905060006124cf610512565b90506124da816131e3565b60005b8151811015612b12578415801561252c5750826001600160a01b031682828151811061251957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b1561253657612b00565b600082828151811061255857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040161258b919061353e565b60206040518083038186803b1580156125a357600080fd5b505afa1580156125b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125db91906134bd565b90506001600160a01b038916301461269e5761269b8184848151811061261157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663dd62ed3e8c306040518363ffffffff1660e01b8152600401612646929190613552565b60206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269691906134bd565b613205565b90505b612702818484815181106126c257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166375de29026040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b90508015612afe576001600160a01b03891630146127c55782828151811061273a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd8a30846040518463ffffffff1660e01b8152600401612771939291906135a0565b602060405180830381600087803b15801561278b57600080fd5b505af115801561279f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c39190613413565b505b6000198714612a4a57600061291b8484815181106127f357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561283357600080fd5b505afa158015612847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286b91906134bd565b610c8786868151811061288e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156128ce57600080fd5b505afa1580156128e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290691906134bd565b61291190600a613727565b610c818c8b6124ac565b905060008111801561292c57508181105b156129e9576129e284848151811061295457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040161298991815260200190565b602060405180830381600087803b1580156129a357600080fd5b505af11580156129b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129db91906134bd565b8790611718565b9550612a44565b612a41848481518110612a0c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040161298991815260200190565b95505b50612af1565b612aee838381518110612a6d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612aaf57600080fd5b505af1158015612ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae791906134bd565b8690611718565b94505b848711612afe5750612b12565b505b80612b0a81613857565b9150506124dd565b508483118015612c195750612c0d826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612b5957600080fd5b505afa158015612b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9191906134bd565b612b9c90600a613727565b836001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015612bd557600080fd5b505afa158015612be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8791906134bd565b612c1784876124ac565b115b15612d5757612c2883866124ac565b600054604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e90612c5a9030908790600401613552565b60206040518083038186803b158015612c7257600080fd5b505afa158015612c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612caa91906134bd565b1015612cc957600054612cc9906001600160a01b03168360001961321b565b6001600160a01b038216636e553f65612ce285886124ac565b896040518363ffffffff1660e01b8152600401612d0092919061362a565b602060405180830381600087803b158015612d1a57600080fd5b505af1158015612d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5291906134bd565b508492505b6001600160a01b0386163014612d7e57600054612d7e906001600160a01b0316878561185b565b5050949350505050565b600080612d93611424565b90508215612e5b576000198414612dc157600054612dbc906001600160a01b031687308761332d565b612e5b565b6000546040516370a0823160e01b8152612e5b91889130916001600160a01b0316906370a0823190612df790859060040161353e565b60206040518083038186803b158015612e0f57600080fd5b505afa158015612e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4791906134bd565b6000546001600160a01b031692919061332d565b600054604051636eb1769f60e11b815285916001600160a01b03169063dd62ed3e90612e8d9030908690600401613552565b60206040518083038186803b158015612ea557600080fd5b505afa158015612eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edd91906134bd565b1015612f175760008054612efe916001600160a01b0390911690839061321b565b600054612f17906001600160a01b03168260001961321b565b600080546040516370a0823160e01b81526001600160a01b03909116906370a0823190612f4890309060040161353e565b60206040518083038186803b158015612f6057600080fd5b505afa158015612f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9891906134bd565b90506001600160a01b038616301461303057604051636e553f6560e01b81526001600160a01b03831690636e553f6590612fd89088908a9060040161362a565b602060405180830381600087803b158015612ff257600080fd5b505af1158015613006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302a91906134bd565b506130db565b60001985146130665760405163b6b55f2560e01b8152600481018690526001600160a01b0383169063b6b55f2590602401612fd8565b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156130a157600080fd5b505af11580156130b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d991906134bd565b505b600080546040516370a0823160e01b81526001600160a01b03909116906370a082319061310c90309060040161353e565b60206040518083038186803b15801561312457600080fd5b505afa158015613138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315c91906134bd565b905061316882826124ac565b93506001600160a01b03881630148015906131835750600081115b1561319f5760005461319f906001600160a01b0316898361185b565b505050949350505050565b606083156131b9575081611724565b8251156131c95782518084602001fd5b8160405162461bcd60e51b815260040161034c9190613641565b60015481511115610f7157805161320190600190602084019061334e565b5050565b60008183106132145781611724565b5090919050565b8015806132a35750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906132519030908690600401613552565b60206040518083038186803b15801561326957600080fd5b505afa15801561327d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a191906134bd565b155b61330e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161034c565b6118b18363095ea7b360e01b848460405160240161187a9291906135c4565b611b4d846323b872dd60e01b85858560405160240161187a939291906135a0565b8280548282559060005260206000209081019282156133a3579160200282015b828111156133a357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061336e565b506110909291505b8082111561109057600081556001016133ab565b6000602082840312156133d0578081fd5b813561172481613888565b6000602082840312156133ec578081fd5b815161172481613888565b600060208284031215613408578081fd5b81356117248161389d565b600060208284031215613424578081fd5b81516117248161389d565b60008060408385031215613441578081fd5b82359150602083013561345381613888565b809150509250929050565b600080600080600060a08688031215613475578081fd5b85359450602086013561348781613888565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156134b6578081fd5b5035919050565b6000602082840312156134ce578081fd5b5051919050565b600080604083850312156134e7578182fd5b8235915060208301356134538161389d565b6000806040838503121561350b578182fd5b82359150602083013560ff81168114613453578182fd5b6000825161353481846020870161382b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252901515608082015260a00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561361e5783516001600160a01b0316835292840192918401916001016135f9565b50909695505050505050565b9182526001600160a01b0316602082015260400190565b600060208252825180602084015261366081604085016020870161382b565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156136bc576136bc613872565b500190565b6000826136dc57634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116136f3575061371e565b81870482111561370557613705613872565b8086161561371257918102915b9490941c9380026136e4565b94509492505050565b6000611724600019848460008261374057506001611724565b8161374d57506000611724565b8160018114613763576002811461376d5761379a565b6001915050611724565b60ff84111561377e5761377e613872565b6001841b91508482111561379457613794613872565b50611724565b5060208310610133831016604e8410600b84101617156137cd575081810a838111156137c8576137c8613872565b611724565b6137da84848460016136e1565b8086048211156137ec576137ec613872565b02949350505050565b600081600019048311821515161561380f5761380f613872565b500290565b60008282101561382657613826613872565b500390565b60005b8381101561384657818101518382015260200161382e565b83811115611b4d5750506000910152565b600060001982141561386b5761386b613872565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610f7157600080fd5b8015158114610f7157600080fdfea26469706673582212205896b8c49a9da4c7fd3a3acdbd2650e927c3b6935ee7581389c17d7c4ed9f9c364736f6c63430008020033a2646970667358221220df6f62eb5ff9c5402dcc7806609aa8ebfdfcfdb30b3e886636e29ab78fa6c8cb64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632635aec2146100515780635487beb614610066578063b9c4b4961461009e578063bb870317146100be575b600080fd5b61006461005f366004610249565b6100d1565b005b610089610074366004610228565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6002546100b1906001600160a01b031681565b604051610095919061027b565b6001546100b1906001600160a01b031681565b6002546001546040516000926001600160a01b0390811692869291169085906100f9906101ff565b6001600160a01b039485168152928416602084015290831660408301529091166060820152608001604051809103906000f08015801561013d573d6000803e3d6000fd5b5060405163f2fde38b60e01b81529091506001600160a01b0382169063f2fde38b9061016d90339060040161027b565b600060405180830381600087803b15801561018757600080fd5b505af115801561019b573d6000803e3d6000fd5b5050506001600160a01b03821660009081526020819052604090819020805460ff19166001179055517f2e49a5810fda2439a23771848b4acec786b0a64d4de3d124ac57fc8739c3887591506101f290839061027b565b60405180910390a1505050565b613b468061029083390190565b80356001600160a01b038116811461022357600080fd5b919050565b600060208284031215610239578081fd5b6102428261020c565b9392505050565b6000806040838503121561025b578081fd5b6102648361020c565b91506102726020840161020c565b90509250929050565b6001600160a01b039190911681526020019056fe60806040523480156200001157600080fd5b5060405162003b4638038062003b468339810160408190526200003491620001f9565b600080546001600160a01b038086166001600160a01b031992831617909255600280549285169290911691909117905562000076620000703390565b62000166565b600780546001600160a01b0319166001600160a01b03868116919091179091558316156200013c57604051630e177dc760e41b81526001600160a01b03848116600483015283169063e177dc709060240160206040518083038186803b158015620000e057600080fd5b505afa158015620000f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011b9190620001d5565b600880546001600160a01b0319166001600160a01b03929092169190911790555b600480546001600160a01b0319166001600160a01b03929092169190911790555062000255915050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620001d057600080fd5b919050565b600060208284031215620001e7578081fd5b620001f282620001b8565b9392505050565b600080600080608085870312156200020f578283fd5b6200021a85620001b8565b93506200022a60208601620001b8565b92506200023a60408601620001b8565b91506200024a60608601620001b8565b905092959194509250565b6138e180620002656000396000f3fe608060405234801561001057600080fd5b506004361061013d5760003560e01c80628bd5691461014257806301e1d11414610157578063063effeb146101725780631963e7f8146101875780632a64e6351461019a57806330e5065e146101ba57806331be3a60146101cd578063335df652146101e057806344552b5f146101f357806366d16cc3146101fb578063715018a6146102035780637b1039991461020b5780638c3268761461021e5780638da5cb5b1461022757806395a078e81461022f578063a91ee0dc14610262578063b9c4b49614610275578063be99970514610288578063c70245c21461029b578063e95b2de8146102ae578063eac9b92c146102b6578063f030d912146102c9578063f2fde38b146102dc578063f5c16af3146102ef578063fbfa77cf146102f7578063fc0c546a1461030a575b600080fd5b61015561015036600461342f565b61031d565b005b61015f61043e565b6040519081526020015b60405180910390f35b61017a610512565b60405161016991906135dd565b6101556101953660046134d5565b6107d9565b6004546101ad906001600160a01b031681565b604051610169919061353e565b61015f6101c83660046133bf565b610a81565b6101556101db3660046133f7565b610ca8565b6101556101ee3660046134a5565b610f5a565b610155610f74565b61015f61102f565b610155611094565b6002546101ad906001600160a01b031681565b61015f60065481565b6101ad6110cf565b61025261023d3660046133bf565b60056020526000908152604090205460ff1681565b6040519015158152602001610169565b6101556102703660046133bf565b6110de565b6007546101ad906001600160a01b031681565b6101556102963660046134a5565b611232565b6101556102a936600461345e565b6112ef565b6101ad611424565b6009546101ad906001600160a01b031681565b61015f6102d73660046134f9565b6114af565b6101556102ea3660046133bf565b611598565b61015f611635565b6008546101ad906001600160a01b031681565b6000546101ad906001600160a01b031681565b336103266110cf565b6001600160a01b0316146103555760405162461bcd60e51b815260040161034c90613674565b60405180910390fd5b600760009054906101000a90046001600160a01b03166001600160a01b031663bfe109286040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a357600080fd5b505afa1580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db91906133db565b6001600160a01b0316633a5d5a3983836040518363ffffffff1660e01b815260040161040892919061362a565b600060405180830381600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b505050505050565b600080610449610512565b905060005b815181101561050d576104f982828151811061047a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ba57600080fd5b505afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f291906134bd565b8490611718565b92508061050581613857565b91505061044e565b505090565b6001546002546000805460405163f9c7bba560e01b8152606094936001600160a01b039081169263f9c7bba59261054f929091169060040161353e565b60206040518083038186803b15801561056757600080fd5b505afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906134bd565b90508082141561060d5760018054806020026020016040519081016040528092919081815260200182805480156105ff57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105e1575b5050505050925050506107d6565b6000816001600160401b0381111561063557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561065e578160200160208202803683370190505b50905060005b838110156106f5576001818154811061068d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168282815181106106cb57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806106ed81613857565b915050610664565b50825b828110156107d057600254600054604051633ddfe34f60e11b81526001600160a01b0392831692637bbfc69e926107369291169085906004016135c4565b60206040518083038186803b15801561074e57600080fd5b505afa158015610762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078691906133db565b8282815181106107a657634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806107c881613857565b9150506106f8565b50925050505b90565b336107e26110cf565b6001600160a01b0316146108085760405162461bcd60e51b815260040161034c90613674565b60006108138361172b565b90506006548111156108795760405162461bcd60e51b815260206004820152602960248201527f756e6465726c79696e6720616d6f756e7420686967686572207468616e207661604482015268756c742076616c756560b81b606482015260840161034c565b600754604080516303e21fa960e61b815290516000926001600160a01b03169163f887ea40916004808301926020929190829003018186803b1580156108be57600080fd5b505afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f691906133db565b9050816006600082825461090a9190613814565b909155505060085460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061094190849088906004016135c4565b602060405180830381600087803b15801561095b57600080fd5b505af115801561096f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109939190613413565b50806001600160a01b031663499ab9766109ab6110cf565b60085460408051637e062a3560e11b8152905130926001600160a01b03169163fc0c546a916004808301926020929190829003018186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2791906133db565b88886040518663ffffffff1660e01b8152600401610a4995949392919061356c565b600060405180830381600087803b158015610a6357600080fd5b505af1158015610a77573d6000803e3d6000fd5b5050505050505050565b600080610a8c610512565b905060005b8151811015610ca157610c8d6104f2838381518110610ac057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0057600080fd5b505afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3891906134bd565b610b4390600a613727565b610c87858581518110610b6657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde91906134bd565b868681518110610bfe57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b8152600401610c31919061353e565b60206040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8191906134bd565b90611843565b9061184f565b925080610c9981613857565b915050610a91565b5050919050565b33610cb16110cf565b6001600160a01b031614610cd75760405162461bcd60e51b815260040161034c90613674565b600060068190556008546040516370a0823160e01b81526001600160a01b03909116906370a0823190610d0e90309060040161353e565b60206040518083038186803b158015610d2657600080fd5b505afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e91906134bd565b90506000600760009054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de891906133db565b60085460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610e1b90849086906004016135c4565b602060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6d9190613413565b50806001600160a01b031663499ab976610e856110cf565b60085460408051637e062a3560e11b8152905130926001600160a01b03169163fc0c546a916004808301926020929190829003018186803b158015610ec957600080fd5b505afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0191906133db565b86886040518663ffffffff1660e01b8152600401610f2395949392919061356c565b600060405180830381600087803b158015610f3d57600080fd5b505af1158015610f51573d6000803e3d6000fd5b50505050505050565b600454610f71906001600160a01b0316338361185b565b50565b33610f7d6110cf565b6001600160a01b031614610fa35760405162461bcd60e51b815260040161034c90613674565b6008546040516370a0823160e01b815261102a916001600160a01b0316906370a0823190610fd590309060040161353e565b60206040518083038186803b158015610fed57600080fd5b505afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102591906134bd565b61172b565b600655565b6008546040516370a0823160e01b81526000918291611066916001600160a01b0316906370a0823190610fd590309060040161353e565b9050600654811161107b5760009150506107d6565b6006546110889082613814565b9150506107d6565b5090565b3361109d6110cf565b6001600160a01b0316146110c35760405162461bcd60e51b815260040161034c90613674565b6110cd60006118b6565b565b6003546001600160a01b031690565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116491906133db565b6001600160a01b0316336001600160a01b03161461118157600080fd5b600280546001600160a01b0319166001600160a01b03838116919091179182905560408051635aa6e67560e01b815290519290911691635aa6e67591600480820192602092909190829003018186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121591906133db565b6001600160a01b0316336001600160a01b031614610f7157600080fd5b600760009054906101000a90046001600160a01b03166001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b891906133db565b6001600160a01b0316336001600160a01b0316146112d557600080fd5b80600660008282546112e791906136a9565b909155505050565b336112f86110cf565b6001600160a01b03161461131e5760405162461bcd60e51b815260040161034c90613674565b600760009054906101000a90046001600160a01b03166001600160a01b031663bfe109286040518163ffffffff1660e01b815260040160206040518083038186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a491906133db565b6040516372b9edeb60e11b8152600481018790526001600160a01b038681166024830152604482018690526064820185905260848201849052919091169063e573dbd69060a401600060405180830381600087803b15801561140557600080fd5b505af1158015611419573d6000803e3d6000fd5b505050505050505050565b60025460008054604051630e177dc760e41b815291926001600160a01b039081169263e177dc709261145a92169060040161353e565b60206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa91906133db565b905090565b600754604080516317fc212560e31b815290516000926001600160a01b03169163bfe10928916004808301926020929190829003018186803b1580156114f457600080fd5b505afa158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c91906133db565b6001600160a01b0316336001600160a01b03161461154957600080fd5b60ff82166115625761155b8333611908565b5081611592565b60ff8216600114156115785761155b8333611b53565b60ff82166002141561158e5761158e8333611e59565b5060005b92915050565b336115a16110cf565b6001600160a01b0316146115c75760405162461bcd60e51b815260040161034c90613674565b6001600160a01b03811661162c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034c565b610f71816118b6565b6000336116406110cf565b6001600160a01b0316146116665760405162461bcd60e51b815260040161034c90613674565b61166f306120e5565b600254600054604051630e177dc760e41b81529293506001600160a01b039182169263e177dc70926116a592169060040161353e565b60206040518083038186803b1580156116bd57600080fd5b505afa1580156116d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f591906133db565b600880546001600160a01b0319166001600160a01b039290921691909117905590565b600061172482846136a9565b9392505050565b6008546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a891906134bd565b6117b390600a613727565b60085460408051634ca9858360e11b8152905185926001600160a01b0316916399530b06916004808301926020929190829003018186803b1580156117f757600080fd5b505afa15801561180b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182f91906134bd565b61183991906137f5565b61159291906136c1565b600061172482846137f5565b600061172482846136c1565b6118b18363a9059cbb60e01b848460405160240161187a9291906135c4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526120f3565b505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60075460408051631674811760e31b815290516000926001600160a01b03169163b3a408b8916004808301926020929190829003018186803b15801561194d57600080fd5b505afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198591906133db565b604051636a89e82d60e01b815260048101859052602481018590526001600160a01b039190911690636a89e82d90604401602060405180830381600087803b1580156119d057600080fd5b505af11580156119e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0891906134bd565b90506000612710611a1983866137f5565b611a2391906136c1565b611a2d90856136a9565b9050611a3761102f565b611a408261172b565b1115611a8e5760405162461bcd60e51b815260206004820181905260248201527f4e6f7420656e6f7567682070726f66697420746f20636f7665722065706f6368604482015260640161034c565b600854611aa5906001600160a01b0316848661185b565b600754604080516361d027b360e01b81529051611b4d926001600160a01b0316916361d027b3916004808301926020929190829003018186803b158015611aeb57600080fd5b505afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2391906133db565b612710611b3085886137f5565b611b3a91906136c1565b6008546001600160a01b0316919061185b565b50505050565b6000611b5e8361172b565b90506000611b6a61102f565b90506000600760009054906101000a90046001600160a01b03166001600160a01b031663b3a408b86040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbc57600080fd5b505afa158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf491906133db565b604051636a89e82d60e01b815260048101849052602481018590526001600160a01b039190911690636a89e82d90604401602060405180830381600087803b158015611c3f57600080fd5b505af1158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7791906134bd565b90506000612710611c8883866137f5565b611c9291906136c1565b611c9c90856136a9565b905082811115611cc757611cb08382613814565b60066000828254611cc19190613814565b90915550505b60085460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611cf99088908a906004016135c4565b602060405180830381600087803b158015611d1357600080fd5b505af1158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190613413565b50600854600754604080516361d027b360e01b815290516001600160a01b039384169363a9059cbb9316916361d027b3916004808301926020929190829003018186803b158015611d9b57600080fd5b505afa158015611daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd391906133db565b612710611de0868b6137f5565b611dea91906136c1565b6040518363ffffffff1660e01b8152600401611e079291906135c4565b602060405180830381600087803b158015611e2157600080fd5b505af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f519190613413565b6000612710600760009054906101000a90046001600160a01b03166001600160a01b031663b3a408b86040518163ffffffff1660e01b815260040160206040518083038186803b158015611eac57600080fd5b505afa158015611ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee491906133db565b6001600160a01b031663231051b46040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1c57600080fd5b505afa158015611f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5491906134bd565b611f5e90856137f5565b611f6891906136c1565b6004805460405163a9059cbb60e01b81529293506001600160a01b03169163a9059cbb91611f9a9186918891016135c4565b602060405180830381600087803b158015611fb457600080fd5b505af1158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec9190613413565b5060048054600754604080516361d027b360e01b815290516001600160a01b039384169463a9059cbb94909316926361d027b392808201926020929091829003018186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207591906133db565b836040518363ffffffff1660e01b81526004016120939291906135c4565b602060405180830381600087803b1580156120ad57600080fd5b505af11580156120c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4d9190613413565b6000611592826000196121c5565b6000612148826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121d39092919063ffffffff16565b8051909150156118b157808060200190518101906121669190613413565b6118b15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161034c565b6000611724838360006121ea565b60606121e28484600085612384565b949350505050565b6000806121f5611424565b90506000816001600160a01b031663ecf708586040518163ffffffff1660e01b815260040160206040518083038186803b15801561223257600080fd5b505afa158015612246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226a91906134bd565b90506000826001600160a01b03166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156122a757600080fd5b505afa1580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122df91906134bd565b90508082116122f45760009350505050611724565b8560001983108015612307575060001981105b1561232857600061231884846124ac565b905080821115612326578091505b505b801561237957600061233d89308460006124b8565b90508061235257600095505050505050611724565b61235f308a836000612d88565b95508661236c82886124ac565b111561237757600080fd5b505b505050509392505050565b6060824710156123e55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161034c565b843b6124335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161034c565b600080866001600160a01b0316858760405161244f9190613522565b60006040518083038185875af1925050503d806000811461248c576040519150601f19603f3d011682016040523d82523d6000602084013e612491565b606091505b50915091506124a18282866131aa565b979650505050505050565b60006117248284613814565b6000806124c3611424565b905060006124cf610512565b90506124da816131e3565b60005b8151811015612b12578415801561252c5750826001600160a01b031682828151811061251957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b1561253657612b00565b600082828151811061255857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040161258b919061353e565b60206040518083038186803b1580156125a357600080fd5b505afa1580156125b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125db91906134bd565b90506001600160a01b038916301461269e5761269b8184848151811061261157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663dd62ed3e8c306040518363ffffffff1660e01b8152600401612646929190613552565b60206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269691906134bd565b613205565b90505b612702818484815181106126c257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166375de29026040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b90508015612afe576001600160a01b03891630146127c55782828151811061273a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd8a30846040518463ffffffff1660e01b8152600401612771939291906135a0565b602060405180830381600087803b15801561278b57600080fd5b505af115801561279f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c39190613413565b505b6000198714612a4a57600061291b8484815181106127f357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561283357600080fd5b505afa158015612847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286b91906134bd565b610c8786868151811061288e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156128ce57600080fd5b505afa1580156128e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290691906134bd565b61291190600a613727565b610c818c8b6124ac565b905060008111801561292c57508181105b156129e9576129e284848151811061295457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040161298991815260200190565b602060405180830381600087803b1580156129a357600080fd5b505af11580156129b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129db91906134bd565b8790611718565b9550612a44565b612a41848481518110612a0c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040161298991815260200190565b95505b50612af1565b612aee838381518110612a6d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612aaf57600080fd5b505af1158015612ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae791906134bd565b8690611718565b94505b848711612afe5750612b12565b505b80612b0a81613857565b9150506124dd565b508483118015612c195750612c0d826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612b5957600080fd5b505afa158015612b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9191906134bd565b612b9c90600a613727565b836001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015612bd557600080fd5b505afa158015612be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8791906134bd565b612c1784876124ac565b115b15612d5757612c2883866124ac565b600054604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e90612c5a9030908790600401613552565b60206040518083038186803b158015612c7257600080fd5b505afa158015612c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612caa91906134bd565b1015612cc957600054612cc9906001600160a01b03168360001961321b565b6001600160a01b038216636e553f65612ce285886124ac565b896040518363ffffffff1660e01b8152600401612d0092919061362a565b602060405180830381600087803b158015612d1a57600080fd5b505af1158015612d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5291906134bd565b508492505b6001600160a01b0386163014612d7e57600054612d7e906001600160a01b0316878561185b565b5050949350505050565b600080612d93611424565b90508215612e5b576000198414612dc157600054612dbc906001600160a01b031687308761332d565b612e5b565b6000546040516370a0823160e01b8152612e5b91889130916001600160a01b0316906370a0823190612df790859060040161353e565b60206040518083038186803b158015612e0f57600080fd5b505afa158015612e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4791906134bd565b6000546001600160a01b031692919061332d565b600054604051636eb1769f60e11b815285916001600160a01b03169063dd62ed3e90612e8d9030908690600401613552565b60206040518083038186803b158015612ea557600080fd5b505afa158015612eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edd91906134bd565b1015612f175760008054612efe916001600160a01b0390911690839061321b565b600054612f17906001600160a01b03168260001961321b565b600080546040516370a0823160e01b81526001600160a01b03909116906370a0823190612f4890309060040161353e565b60206040518083038186803b158015612f6057600080fd5b505afa158015612f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9891906134bd565b90506001600160a01b038616301461303057604051636e553f6560e01b81526001600160a01b03831690636e553f6590612fd89088908a9060040161362a565b602060405180830381600087803b158015612ff257600080fd5b505af1158015613006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302a91906134bd565b506130db565b60001985146130665760405163b6b55f2560e01b8152600481018690526001600160a01b0383169063b6b55f2590602401612fd8565b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156130a157600080fd5b505af11580156130b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d991906134bd565b505b600080546040516370a0823160e01b81526001600160a01b03909116906370a082319061310c90309060040161353e565b60206040518083038186803b15801561312457600080fd5b505afa158015613138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315c91906134bd565b905061316882826124ac565b93506001600160a01b03881630148015906131835750600081115b1561319f5760005461319f906001600160a01b0316898361185b565b505050949350505050565b606083156131b9575081611724565b8251156131c95782518084602001fd5b8160405162461bcd60e51b815260040161034c9190613641565b60015481511115610f7157805161320190600190602084019061334e565b5050565b60008183106132145781611724565b5090919050565b8015806132a35750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906132519030908690600401613552565b60206040518083038186803b15801561326957600080fd5b505afa15801561327d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a191906134bd565b155b61330e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161034c565b6118b18363095ea7b360e01b848460405160240161187a9291906135c4565b611b4d846323b872dd60e01b85858560405160240161187a939291906135a0565b8280548282559060005260206000209081019282156133a3579160200282015b828111156133a357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061336e565b506110909291505b8082111561109057600081556001016133ab565b6000602082840312156133d0578081fd5b813561172481613888565b6000602082840312156133ec578081fd5b815161172481613888565b600060208284031215613408578081fd5b81356117248161389d565b600060208284031215613424578081fd5b81516117248161389d565b60008060408385031215613441578081fd5b82359150602083013561345381613888565b809150509250929050565b600080600080600060a08688031215613475578081fd5b85359450602086013561348781613888565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156134b6578081fd5b5035919050565b6000602082840312156134ce578081fd5b5051919050565b600080604083850312156134e7578182fd5b8235915060208301356134538161389d565b6000806040838503121561350b578182fd5b82359150602083013560ff81168114613453578182fd5b6000825161353481846020870161382b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252901515608082015260a00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561361e5783516001600160a01b0316835292840192918401916001016135f9565b50909695505050505050565b9182526001600160a01b0316602082015260400190565b600060208252825180602084015261366081604085016020870161382b565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156136bc576136bc613872565b500190565b6000826136dc57634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116136f3575061371e565b81870482111561370557613705613872565b8086161561371257918102915b9490941c9380026136e4565b94509492505050565b6000611724600019848460008261374057506001611724565b8161374d57506000611724565b8160018114613763576002811461376d5761379a565b6001915050611724565b60ff84111561377e5761377e613872565b6001841b91508482111561379457613794613872565b50611724565b5060208310610133831016604e8410600b84101617156137cd575081810a838111156137c8576137c8613872565b611724565b6137da84848460016136e1565b8086048211156137ec576137ec613872565b02949350505050565b600081600019048311821515161561380f5761380f613872565b500290565b60008282101561382657613826613872565b500390565b60005b8381101561384657818101518382015260200161382e565b83811115611b4d5750506000910152565b600060001982141561386b5761386b613872565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610f7157600080fd5b8015158114610f7157600080fdfea26469706673582212205896b8c49a9da4c7fd3a3acdbd2650e927c3b6935ee7581389c17d7c4ed9f9c364736f6c63430008020033a2646970667358221220df6f62eb5ff9c5402dcc7806609aa8ebfdfcfdb30b3e886636e29ab78fa6c8cb64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7201,
        "contract": "contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVaultFactory.sol:ApeVaultFactory",
        "label": "vaultRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7203,
        "contract": "contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVaultFactory.sol:ApeVaultFactory",
        "label": "yearnRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7205,
        "contract": "contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVaultFactory.sol:ApeVaultFactory",
        "label": "apeRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}