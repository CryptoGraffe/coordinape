{
  "address": "0x5C040Ed0869fe13a6c5Bfb66C268F45D5666bFEc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minDelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "CallCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CallExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "CallScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositInVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromVault",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "apeVaultFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        }
      ],
      "name": "changeMinDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_apeVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "delegateDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_apeVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shareAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_underlying",
          "type": "bool"
        }
      ],
      "name": "delegateWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_delay",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "isDoneCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "isPendingCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "isReadyCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_delay",
          "type": "uint256"
        }
      ],
      "name": "schedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "timestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yearnRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79b1c6e24892f4edc75a79bb9a3a020b4aff4dc0ee60e25247930f54c6333e02",
  "receipt": {
    "to": null,
    "from": "0x64EFa8dFc175098E7CdeBb99112C6e4BA22bb642",
    "contractAddress": "0x5C040Ed0869fe13a6c5Bfb66C268F45D5666bFEc",
    "transactionIndex": 0,
    "gasUsed": "1666658",
    "logsBloom": "0x
    "blockHash": "0xb5c5d2ab11e44b78bf851e83faeec4edc507003e009f4a779ed5afd9ca5d21a7",
    "transactionHash": "0x79b1c6e24892f4edc75a79bb9a3a020b4aff4dc0ee60e25247930f54c6333e02",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13619644,
        "transactionHash": "0x79b1c6e24892f4edc75a79bb9a3a020b4aff4dc0ee60e25247930f54c6333e02",
        "address": "0x5C040Ed0869fe13a6c5Bfb66C268F45D5666bFEc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000064efa8dfc175098e7cdebb99112c6e4ba22bb642"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb5c5d2ab11e44b78bf851e83faeec4edc507003e009f4a779ed5afd9ca5d21a7"
      }
    ],
    "blockNumber": 13619644,
    "cumulativeGasUsed": "1666658",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE15461B18EE31b7379019Dc523231C57d1Cbc18c",
    "0x978A2941BA6CA861DFEE872c75e9FA5C51030d63",
    0
  ],
  "solcInputHash": "5c4c3df40c9a1c47594072bf6f28af44",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"CallCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CallScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositInVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromVault\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apeVaultFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"changeMinDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_apeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegateDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_underlying\",\"type\":\"bool\"}],\"name\":\"delegateWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isDoneCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isPendingCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isReadyCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearnRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRegistry(address)\":{\"params\":{\"_registry\":\"The new _registry address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRegistry(address)\":{\"notice\":\"Used to update the yearn registry.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol\":\"ApeRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeAllowanceModule.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nabstract contract ApeAllowanceModule {\\n\\n\\tstruct Allowance {\\n\\t\\tuint256 maxAmount;\\n\\t\\tuint256 maxInterval;\\n\\t}\\n\\n\\tstruct CurrentAllowance {\\n\\t\\tuint256 debt;\\n\\t\\tuint256 intervalStart;\\n\\t\\tuint256 epochs;\\n\\t}\\n\\n\\t// vault => circle => token => allowance\\n\\tmapping(address => mapping(bytes32 => mapping(address => Allowance))) public allowances;\\n\\tmapping(address => mapping(bytes32 => mapping(address => CurrentAllowance))) public currentAllowances;\\n\\n\\tevent AllowanceUpdated(address vault, bytes32 circle, address token, uint256 amount, uint256 interval);\\n\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to set an allowance of a circle from an ape vault.\\n\\t * Setting _epochs at 0 with a non-zero _amount entitles the circle to one epoch of funds\\n\\t * @param _circle Circle ID receiving the allowance\\n\\t * @param _token Address of token to allocate\\n\\t * @param _amount Amount to take out at most\\n\\t * @param _interval Duration of an epoch in seconds\\n\\t * @param _epochs Amount of epochs to fund. Expected_funded_epochs = _epochs + 1\\n\\t * @param _intervalStart Unix timestamp fromw hich epoch starts (block.timestamp if 0)\\n\\t */\\n\\tfunction setAllowance(\\n\\t\\tbytes32 _circle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _interval,\\n\\t\\tuint256 _epochs,\\n\\t\\tuint256 _intervalStart\\n\\t\\t) external {\\n\\t\\tallowances[msg.sender][_circle][_token] = Allowance({\\n\\t\\t\\tmaxAmount: _amount,\\n\\t\\t\\tmaxInterval: _interval\\n\\t\\t});\\n\\n\\t\\tcurrentAllowances[msg.sender][_circle][_token] = CurrentAllowance({\\n\\t\\t\\tdebt: 0,\\n\\t\\t\\tintervalStart: _intervalStart == 0 ? block.timestamp : _intervalStart,\\n\\t\\t\\tepochs: _epochs\\n\\t\\t});\\n\\t\\temit AllowanceUpdated(msg.sender, _circle, _token, _amount, _interval);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to check and update if a circle can take funds out of an ape vault\\n\\t * @param _vault Address of vault to take funds from\\n\\t * @param _circle Circle ID querying the funds\\n\\t * @param _token Address of token to take out\\n\\t * @param _amount Amount to take out\\n\\t */\\n\\tfunction _isTapAllowed(\\n\\t\\taddress _vault,\\n\\t\\tbytes32 _circle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount\\n\\t\\t) internal {\\n\\t\\tAllowance memory allowance = allowances[_vault][_circle][_token];\\n\\t\\tCurrentAllowance storage currentAllowance = currentAllowances[_vault][_circle][_token];\\n\\n\\t\\t_updateInterval(currentAllowance, allowance);\\n\\t\\trequire(currentAllowance.debt + _amount <= allowance.maxAmount, \\\"Circle does not have sufficient allowance\\\");\\n\\t\\tcurrentAllowance.debt += _amount;\\n\\t}\\n\\n\\tfunction _updateInterval(CurrentAllowance storage _currentAllowance, Allowance memory _allowance) internal {\\n\\t\\tuint256 elapsedTime = block.timestamp - _currentAllowance.intervalStart;\\n\\t\\tif (elapsedTime > _allowance.maxInterval) {\\n\\t\\t\\trequire(_currentAllowance.epochs > 0, \\\"Circle cannot tap anymore\\\");\\n\\t\\t\\t_currentAllowance.debt = 0;\\n\\t\\t\\t_currentAllowance.intervalStart += _allowance.maxInterval * (elapsedTime / _allowance.maxInterval);\\n\\t\\t\\t_currentAllowance.epochs--;\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x29072d0ae92a8d1244b1d7aec81993f84df51bc9ab5f678b2de9e12a356a7609\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeDistributor.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\"; \\nimport \\\"./wrapper/ApeVault.sol\\\";\\nimport \\\"./ApeAllowanceModule.sol\\\";\\nimport {VaultAPI} from \\\"./wrapper/BaseWrapper.sol\\\";\\n\\ncontract ApeDistributor is ApeAllowanceModule {\\n\\tusing MerkleProof for bytes32[];\\n\\tusing SafeERC20 for IERC20;\\n\\n\\n\\t// address to approve admins for a circle\\n\\t// vault => circle => admin address\\n\\tmapping(address => mapping(bytes32 => address)) public vaultApprovals;\\n\\n\\n\\t// roots following this mapping:\\n\\t// circle address => token address => epoch ID => root\\n\\tmapping(bytes32 =>mapping(address => mapping(uint256 => bytes32))) public epochRoots;\\n\\tmapping(bytes32 =>mapping(address => uint256)) public epochTracking;\\n\\tmapping(bytes32 => mapping(address => mapping(uint256 => mapping(uint256 => uint256)))) public epochClaimBitMap;\\n\\n\\tmapping(bytes32 => mapping(address => uint256)) public circleAlloc;\\n\\n\\t// checkpoints following this mapping:\\n\\t// circle => token => address => checkpoint\\n\\tmapping(bytes32 => mapping(address => mapping(address => uint256))) public checkpoints;\\n\\n\\tevent AdminApproved(address indexed vault, bytes32 indexed circle, address indexed admin);\\n\\n\\tevent Claimed(bytes32 circle, address token, uint256 epoch, uint256 index, address account, uint256 amount);\\n\\n\\tevent apeVaultFundsTapped(address indexed apeVault, address yearnVault, uint256 amount);\\n\\n\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to allow a circle to supply an epoch with funds from a given ape vault\\n\\t * @param _vault Address of ape vault from which to take funds from\\n\\t * @param _circle Circle ID querying the funds\\n\\t * @param _token Address of the token to withdraw from the vault\\n\\t * @param _root Merkle root of the current circle's epoch\\n\\t * @param _amount Amount of tokens to withdraw\\n\\t * @param _tapType Ape vault's type tap (pure profit, mixed, simple token)\\n\\t */\\n\\tfunction uploadEpochRoot(\\n\\t\\taddress _vault,\\n\\t\\tbytes32 _circle,\\n\\t\\taddress _token,\\n\\t\\tbytes32 _root,\\n\\t\\tuint256 _amount,\\n\\t\\tuint8 _tapType)\\n\\t\\texternal {\\n\\t\\trequire(vaultApprovals[_vault][_circle] == msg.sender || ApeVaultWrapper(_vault).owner() == msg.sender, \\\"Sender cannot upload a root\\\");\\n\\t\\trequire(address(ApeVaultWrapper(_vault).vault()) == _token, \\\"Vault cannot supply token\\\");\\n\\t\\t_isTapAllowed(_vault, _circle, _token, _amount);\\n\\t\\tuint256 epoch = epochTracking[_circle][_token];\\n\\t\\tepochRoots[_circle][_token][epoch] = _root;\\n\\n\\t\\tepochTracking[_circle][_token]++;\\n\\t\\tcircleAlloc[_circle][_token] += _amount;\\n\\t\\tuint256 beforeBal = IERC20(_token).balanceOf(address(this));\\n\\t\\tuint256 sharesRemoved = ApeVaultWrapper(_vault).tap(_amount, _tapType);\\n\\t\\tuint256 afterBal = IERC20(_token).balanceOf(address(this));\\n\\t\\trequire(afterBal - beforeBal == _amount, \\\"Did not receive correct amount of tokens\\\");\\n\\t\\tif (sharesRemoved > 0)\\n\\t\\t\\temit apeVaultFundsTapped(_vault, address(ApeVaultWrapper(_vault).vault()), sharesRemoved);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to allow an ape vault owner to set an admin for a circle\\n\\t * @param _circle Circle ID of future admin\\n\\t * @param _admin Address of allowed admin to call `uploadEpochRoot`\\n\\t */\\n\\tfunction updateCircleAdmin(bytes32 _circle, address _admin) external {\\n\\t\\tvaultApprovals[msg.sender][_circle] = _admin;\\n\\t\\temit AdminApproved(msg.sender, _circle, _admin);\\n\\t}\\n\\n\\tfunction isClaimed(bytes32 _circle, address _token, uint256 _epoch, uint256 _index) public view returns(bool) {\\n\\t\\tuint256 wordIndex = _index / 256;\\n\\t\\tuint256 bitIndex = _index % 256;\\n\\t\\tuint256 word = epochClaimBitMap[_circle][_token][_epoch][wordIndex];\\n\\t\\tuint256 bitMask = 1 << bitIndex;\\n\\t\\treturn word & bitMask == bitMask;\\n\\t}\\n\\n\\tfunction _setClaimed(bytes32 _circle, address _token, uint256 _epoch, uint256 _index) internal {\\n\\t\\tuint256 wordIndex = _index / 256;\\n\\t\\tuint256 bitIndex = _index % 256;\\n\\t\\tepochClaimBitMap[_circle][_token][_epoch][wordIndex] |= 1 << bitIndex;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to allow circle users to claim their allocation of a given epoch\\n\\t * @param _circle Circle ID of the user\\n\\t * @param _token Address of token claimed\\n\\t * @param _epoch Epoch ID associated to the claim\\n\\t * @param _index Position of user's address in the merkle tree\\n\\t * @param _account Address of user\\n\\t * @param _checkpoint Total amount of tokens claimed by user (enables to claim multiple epochs at once)\\n\\t * @param _redeemShares Boolean to allow user to redeem underlying tokens of a yearn vault (prerequisite: _token must be a yvToken)\\n\\t * @param _proof Merkle proof to verify user is entitled to claim\\n\\t */\\n\\tfunction claim(bytes32 _circle, address _token, uint256 _epoch, uint256 _index, address _account, uint256 _checkpoint, bool _redeemShares, bytes32[] memory _proof) public {\\n\\t\\trequire(!isClaimed(_circle, _token, _epoch, _index), \\\"Claimed already\\\");\\n\\t\\tbytes32 node = keccak256(abi.encodePacked(_index, _account, _checkpoint));\\n\\t\\trequire(_proof.verify(epochRoots[_circle][_token][_epoch], node), \\\"Wrong proof\\\");\\n\\t\\tuint256 currentCheckpoint = checkpoints[_circle][_token][_account];\\n\\t\\trequire(_checkpoint > currentCheckpoint, \\\"Given checkpoint not higher than current checkpoint\\\");\\n\\t\\t\\n\\t\\tuint256 claimable = _checkpoint - currentCheckpoint;\\n\\t\\trequire(claimable <= circleAlloc[_circle][_token], \\\"Can't claim more than circle has to give\\\");\\n\\t\\tcircleAlloc[_circle][_token] -= claimable;\\n\\t\\tcheckpoints[_circle][_token][_account] = _checkpoint;\\n\\t\\t_setClaimed(_circle, _token, _epoch, _index);\\n\\t\\tif (_redeemShares && msg.sender == _account)\\n\\t\\t\\tVaultAPI(_token).withdraw(claimable, _account);\\n\\t\\telse\\n\\t\\t\\tIERC20(_token).safeTransfer(_account, claimable);\\n\\t\\temit Claimed(_circle, _token, _epoch, _index, _account, claimable);\\n\\t}\\n\\n\\t/**\\n\\t * @notice\\n\\t * Used to allow circle users to claim many tokens at once if applicable\\n\\t * Operated similarly to the `claim` function but due to \\\"Stack too deep errors\\\",\\n\\t * input data was concatenated into similar typed arrays\\n\\t * @param _circles Array of Circle IDs of the user\\n\\t * @param _tokensAndAccounts Array containing token addresses and accounts of user\\n\\t * @param _epochsIndexesCheckpoints Array contaning  Epoch IDs, indexes of user in merkle trees and checkpoints associated to the claim\\n\\t * @param _redeemShares Boolean array  to allow user to redeem underlying tokens of a yearn vault (prerequisite: _token must be a yvToken)\\n\\t * @param _proofs Array of merkle proofs to verify user is entitled to claim\\n\\t */\\n\\tfunction claimMany(\\n\\t\\tbytes32[] calldata _circles,\\n\\t\\taddress[] calldata _tokensAndAccounts,\\n\\t\\tuint256[] calldata _epochsIndexesCheckpoints,\\n\\t\\tbool[] calldata _redeemShares,\\n\\t\\tbytes32[][] memory _proofs) external {\\n\\t\\tfor(uint256 i = 0; i < _circles.length; i++) {\\n\\t\\t\\tclaim(\\n\\t\\t\\t\\t_circles[i],\\n\\t\\t\\t\\t_tokensAndAccounts[i],\\n\\t\\t\\t\\t_epochsIndexesCheckpoints[i],\\n\\t\\t\\t\\t_epochsIndexesCheckpoints[i + _epochsIndexesCheckpoints.length / 3],\\n\\t\\t\\t\\t_tokensAndAccounts[i + _tokensAndAccounts.length / 2],\\n\\t\\t\\t\\t_epochsIndexesCheckpoints[i + _epochsIndexesCheckpoints.length * 2 / 3],\\n\\t\\t\\t\\t_redeemShares[i],\\n\\t\\t\\t\\t_proofs[i]\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\t\",\"keccak256\":\"0xff217cdd6ecf151b957bf778ef2d0d52dcd35fdf7e29a31569fe63d7104fec5f\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeRegistry.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"./TimeLock.sol\\\";\\n\\ncontract ApeRegistry is TimeLock {\\n\\taddress public feeRegistry;\\n\\taddress public router;\\n\\taddress public distributor;\\n\\taddress public factory;\\n\\taddress public treasury;\\n\\n\\tconstructor(uint256 _minDelay) TimeLock(_minDelay) {}\\n\\n\\tfunction setFeeRegistry(address _registry) external itself {\\n\\t\\tfeeRegistry = _registry;\\n\\t}\\n\\n\\tfunction setRouter(address _router) external itself {\\n\\t\\trouter = _router;\\n\\t}\\n\\n\\tfunction setDistributor(address _distributor) external itself {\\n\\t\\tdistributor = _distributor;\\n\\t}\\n\\n\\tfunction setFactory(address _factory) external itself {\\n\\t\\tfactory = _factory;\\n\\t}\\n\\n\\tfunction setTreasury(address _treasury) external itself {\\n\\t\\ttreasury = _treasury;\\n\\t}\\n}\",\"keccak256\":\"0x4695a349a084b95e3fd202a535bb4daa4513fd41a7a76a851d0adc1f366a4cf5\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport {VaultAPI, BaseWrapper, RegistryAPI} from \\\"./wrapper/BaseWrapper.sol\\\";\\nimport {ApeVaultFactory} from \\\"./wrapper/ApeVaultFactory.sol\\\";\\nimport {ApeVaultWrapper} from \\\"./wrapper/ApeVault.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./TimeLock.sol\\\";\\n\\ncontract ApeRouter is TimeLock {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\n\\tuint256 constant MAX_UINT = type(uint256).max;\\n\\n\\taddress public yearnRegistry;\\n\\taddress public apeVaultFactory;\\n\\n\\tconstructor(address _reg, address _factory, uint256 _minDelay) TimeLock(_minDelay)  {\\n\\t\\tyearnRegistry = _reg;\\n\\t\\tapeVaultFactory = _factory;\\n\\t}\\n\\n\\tevent DepositInVault(address indexed vault, address token, uint256 amount);\\n\\tevent WithdrawFromVault(address indexed vault, address token, uint256 amount);\\n\\n\\tfunction delegateDeposit(address _apeVault, address _token, uint256 _amount) external returns(uint256 deposited) {\\n\\t\\tVaultAPI vault = VaultAPI(RegistryAPI(yearnRegistry).latestVault(_token));\\n\\t\\trequire(address(vault) != address(0), \\\"ApeRouter: No vault for token\\\");\\n\\t\\trequire(ApeVaultFactory(apeVaultFactory).vaultRegistry(_apeVault), \\\"ApeRouter: Vault does not exist\\\");\\n\\t\\trequire(address(vault) == address(ApeVaultWrapper(_apeVault).vault()), \\\"ApeRouter: yearn Vault not identical\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\tif (IERC20(_token).allowance(address(this), address(vault)) < _amount) {\\n            IERC20(_token).safeApprove(address(vault), 0); // Avoid issues with some IERC20(_token)s requiring 0\\n            IERC20(_token).safeApprove(address(vault), MAX_UINT); // Vaults are trusted\\n        }\\n\\n\\t\\tuint256 beforeBal = IERC20(_token).balanceOf(address(this));\\n        \\n\\t\\tuint256 sharesMinted = vault.deposit(_amount, _apeVault);\\n\\n        uint256 afterBal = IERC20(_token).balanceOf(address(this));\\n        deposited = beforeBal - afterBal;\\n\\n\\n\\t\\tApeVaultWrapper(_apeVault).addFunds(deposited);\\n\\t\\temit DepositInVault(_apeVault, _token, sharesMinted);\\n\\t}\\n\\n\\tfunction delegateWithdrawal(address _recipient, address _apeVault, address _token, uint256 _shareAmount, bool _underlying) external{\\n\\t\\tVaultAPI vault = VaultAPI(RegistryAPI(yearnRegistry).latestVault(_token));\\n\\t\\trequire(address(vault) != address(0), \\\"ApeRouter: No vault for token\\\");\\n\\t\\trequire(ApeVaultFactory(apeVaultFactory).vaultRegistry(msg.sender), \\\"ApeRouter: Vault does not exist\\\");\\n\\t\\trequire(address(vault) == address(ApeVaultWrapper(_apeVault).vault()), \\\"ApeRouter: yearn Vault not identical\\\");\\n\\n\\t\\tif (_underlying)\\n\\t\\t\\tvault.withdraw(_shareAmount, _recipient);\\n\\t\\telse\\n\\t\\t\\tvault.transfer(_recipient, _shareAmount);\\n\\t\\temit WithdrawFromVault(address(vault), vault.token(), _shareAmount);\\n\\t}\\n\\n\\tfunction removeTokens(address _token) external onlyOwner {\\n\\t\\tIERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\n\\t}\\n\\n\\t /**\\n     * @notice\\n     *  Used to update the yearn registry.\\n     * @param _registry The new _registry address.\\n     */\\n    function setRegistry(address _registry) external itself {\\n        yearnRegistry = _registry;\\n    }\\n}\",\"keccak256\":\"0xc44108a32c45f459178dd72a9d534c20cc11df6f8672a46b3c87e5ae225861d2\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/FeeRegistry.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"./TimeLock.sol\\\";\\n\\ncontract FeeRegistry is TimeLock(0){\\n\\tuint256 private constant _staticFee = 100; // 100 | MAX = 10000\\n\\tbool public on;\\n\\n\\tfunction activateFee() external itself {\\n\\t\\ton = true;\\n\\t}\\n\\n\\tfunction shutdownFee() external itself {\\n\\t\\ton = false;\\n\\t}\\n\\n\\tfunction staticFee() external view returns(uint256) {\\n\\t\\tif (!on)\\n\\t\\t\\treturn 0;\\n\\t\\treturn _staticFee;\\n\\t}\\n\\n\\tfunction getVariableFee(uint256 _yield, uint256 _tapTotal) external returns(uint256 variableFee) {\\n\\t\\tif (!on)\\n\\t\\t\\treturn 0;\\n\\t\\tuint256 yieldRatio = _yield * 1000 / _tapTotal;\\n\\t\\tuint256 baseFee = 100;\\n\\t\\tif (yieldRatio >= 900)\\n\\t\\t\\tvariableFee = baseFee;        // 1%     @ 90% profit\\n\\t\\telse if (yieldRatio >= 800)\\n\\t\\t\\tvariableFee = baseFee + 25;   // 1.25%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 700)\\n\\t\\t\\tvariableFee = baseFee + 50;   // 1.50%  @ 70% profit\\n\\t\\telse if (yieldRatio >= 600)\\n\\t\\t\\tvariableFee = baseFee + 75;   // 1.75%  @ 60% profit\\n\\t\\telse if (yieldRatio >= 500)\\n\\t\\t\\tvariableFee = baseFee + 100;  // 2.00%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 400)\\n\\t\\t\\tvariableFee = baseFee + 125;  // 2.25%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 300)\\n\\t\\t\\tvariableFee = baseFee + 150;  // 2.50%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 200)\\n\\t\\t\\tvariableFee = baseFee + 175;  // 2.75%  @ 80% profit\\n\\t\\telse if (yieldRatio >= 100)\\n\\t\\t\\tvariableFee = baseFee + 200;  // 3.00%  @ 80% profit\\n\\t\\telse\\n\\t\\t\\tvariableFee = baseFee + 250;  // 3.50%  @ 0% profit\\n\\t}\\n}\\n\",\"keccak256\":\"0x65d52f4a21e66dea4f08e856e2ab9e67f5940e1ba8521f13e97cdebf3f1f11f9\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/TimeLock.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TimeLock is Ownable {\\n\\tuint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n\\tmapping(bytes32 => uint256) public timestamps;\\n\\tuint256 public minDelay;\\n\\n\\tevent CallScheduled(\\n        bytes32 indexed id,\\n        address target,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n\\tevent CallCancelled(bytes32 id);\\n\\n\\tevent CallExecuted(bytes32 indexed id, address target, bytes data);\\n\\n\\tconstructor(uint256 _minDelay) {\\n\\t\\tminDelay = _minDelay;\\n\\t}\\n\\n\\n\\tmodifier itself() {\\n\\t\\trequire(msg.sender == address(this), \\\"TimeLock: Caller is not contract itself\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction changeMinDelay(uint256 _min) external itself {\\n\\t\\tminDelay = _min;\\n\\t}\\n\\n\\tfunction hashOperation(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt) internal pure returns(bytes32) {\\n\\t\\treturn keccak256(abi.encode(_target, _data, _predecessor, _salt));\\n\\t}\\n\\n\\tfunction isPendingCall(bytes32 _id) public view returns(bool) {\\n\\t\\treturn timestamps[_id] > _DONE_TIMESTAMP;\\n\\t}\\n\\n\\tfunction isDoneCall(bytes32 _id) public view returns(bool) {\\n\\t\\treturn timestamps[_id] == _DONE_TIMESTAMP;\\n\\t}\\n\\n\\tfunction isReadyCall(bytes32 _id) public view returns(bool) {\\n\\t\\treturn timestamps[_id] <= block.timestamp;\\n\\t}\\n\\n\\tfunction schedule(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt, uint256 _delay) external onlyOwner {\\n\\t\\tbytes32 id = hashOperation(_target, _data, _predecessor, _salt);\\n\\t\\trequire(timestamps[id] == 0, \\\"TimeLock: Call already scheduled\\\");\\n\\t\\trequire(_delay >= minDelay, \\\"TimeLock: Insufficient delay\\\");\\n\\t\\ttimestamps[id] = block.timestamp + minDelay;\\n\\t\\temit CallScheduled(id, _target, _data, _predecessor, _delay);\\n\\t}\\n\\n\\tfunction cancel(bytes32 _id) external onlyOwner {\\n\\t\\trequire(isPendingCall(_id), \\\"TimeLock: Call is not pending\\\");\\n\\t\\ttimestamps[_id] = 0;\\n\\t\\temit CallCancelled(_id);\\n\\t}\\n\\n\\tfunction execute(address _target, bytes calldata _data, bytes32 _predecessor, bytes32 _salt, uint256 _delay) external onlyOwner {\\n\\t\\tbytes32 id = hashOperation(_target, _data, _predecessor, _salt);\\n\\t\\trequire(isReadyCall(id), \\\"TimeLock: Not ready for execution\\\");\\n\\t\\trequire(!isDoneCall(id), \\\"TimeLock: Already executed\\\");\\n\\t\\trequire(_predecessor == bytes32(0) || isDoneCall(_predecessor), \\\"TimeLock: Predecessor call not executed\\\");\\n\\t\\t_call(id, _target, _data);\\n\\t\\ttimestamps[id] = _DONE_TIMESTAMP;\\n\\t}\\n\\n\\tfunction _call(\\n        bytes32 id,\\n        address target,\\n        bytes calldata data\\n    ) internal {\\n        (bool success, ) = target.call(data);\\n        require(success, \\\"Timelock: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, target, data);\\n    }\\n\\n}\",\"keccak256\":\"0xdafdf98b99bba8a9cb8a465b32ec8029f48315f22c1b2df4071d297fcdb889c2\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVault.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../../interfaces/IApeVault.sol\\\";\\nimport \\\"../ApeDistributor.sol\\\";\\nimport \\\"../ApeAllowanceModule.sol\\\";\\nimport \\\"../ApeRegistry.sol\\\";\\nimport \\\"../FeeRegistry.sol\\\";\\nimport \\\"../ApeRouter.sol\\\";\\n\\nimport \\\"./BaseWrapper.sol\\\";\\n\\ncontract ApeVaultWrapper is BaseWrapper, Ownable {\\n\\tusing SafeERC20 for VaultAPI;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tuint256 constant TOTAL_SHARES = 10000;\\n\\t\\n\\tIERC20 public simpleToken;\\n\\n\\tmapping(address => bool) public hasAccess;\\n\\n\\tuint256 public underlyingValue;\\n\\taddress public apeRegistry;\\n\\tVaultAPI public vault;\\n\\tApeAllowanceModule public allowanceModule;\\n\\n\\tconstructor(\\n\\t\\taddress _apeRegistry,\\n\\t    address _token,\\n        address _registry,\\n\\t\\taddress _simpleToken) BaseWrapper(_token, _registry) {\\n\\t\\tapeRegistry = _apeRegistry;\\n\\t\\tif (_token != address(0))\\n\\t\\t\\tvault = VaultAPI(RegistryAPI(_registry).latestVault(_token));\\n\\t\\tsimpleToken = IERC20(_simpleToken);\\n\\t}\\n\\n\\tevent ApeVaultFundWithdrawal(address indexed apeVault, address vault, uint256 _amount, bool underlying);\\n\\n\\tmodifier onlyDistributor() {\\n\\t\\trequire(msg.sender == ApeRegistry(apeRegistry).distributor());\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyRouter() {\\n\\t\\trequire(msg.sender == ApeRegistry(apeRegistry).router());\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _shareValue(uint256 numShares) internal view returns (uint256) {\\n\\t\\treturn vault.pricePerShare() * numShares / (10**uint256(vault.decimals()));\\n    }\\n\\n    function _sharesForValue(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn amount * (10**uint256(vault.decimals())) / vault.pricePerShare();\\n    }\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to measure profits made compared to funds send to the vault\\n\\t * Returns 0 if negative\\n\\t */\\n\\tfunction profit() public view returns(uint256) {\\n\\t\\tuint256 totalValue = _shareValue(vault.balanceOf(address(this)));\\n\\t\\tif (totalValue <= underlyingValue)\\n\\t\\t\\treturn 0;\\n\\t\\telse\\n\\t\\t\\treturn totalValue - underlyingValue;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to withdraw non yield bearing tokens\\n\\t * @param _amount Amount of simpleToken to withdraw\\n\\t */\\n\\tfunction apeWithdrawSimpleToken(uint256 _amount) public {\\n\\t\\tsimpleToken.safeTransfer(msg.sender, _amount);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to withdraw yield bearing token\\n\\t * @param _shareAmount Amount of yield bearing token to withdraw\\n\\t * @param _underlying boolean to know if we redeem shares or not\\n\\t */\\n\\tfunction apeWithdraw(uint256 _shareAmount, bool _underlying) external onlyOwner {\\n\\t\\tuint256 underlyingAmount = _shareValue(_shareAmount);\\n\\t\\trequire(underlyingAmount <= underlyingValue, \\\"underlying amount higher than vault value\\\");\\n\\n\\t\\taddress router = ApeRegistry(apeRegistry).router();\\n\\t\\tunderlyingValue -= underlyingAmount;\\n\\t\\tvault.transfer(router, _shareAmount);\\n\\t\\tApeRouter(router).delegateWithdrawal(owner(), address(this), vault.token(), _shareAmount, _underlying);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to withdraw all yield bearing token\\n\\t * @param _underlying boolean to know if we redeem shares or not\\n\\t */\\n\\tfunction exitVaultToken(bool _underlying) external onlyOwner {\\n\\t\\tunderlyingValue = 0;\\n\\t\\tuint256 totalShares = vault.balanceOf(address(this));\\n\\t\\taddress router = ApeRegistry(apeRegistry).router();\\n\\t\\tvault.transfer(router, totalShares);\\n\\t\\tApeRouter(router).delegateWithdrawal(owner(), address(this), vault.token(), totalShares, _underlying);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to migrate yearn vault\\n\\t */\\n\\tfunction apeMigrate() external onlyOwner returns(uint256 migrated){\\n\\t\\tmigrated = _migrate(address(this));\\n\\t\\tvault = VaultAPI(registry.latestVault(address(token)));\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to take funds from vault into the distributor (can only be called by distributor)\\n\\t * @param _value Amount of funds to take\\n\\t * @param _type The type of tap performed on the vault\\n\\t */\\n\\tfunction tap(uint256 _value, uint8 _type) external onlyDistributor returns(uint256) {\\n\\t\\tif (_type == uint8(0)) {\\n\\t\\t\\t_tapOnlyProfit(_value, msg.sender);\\n\\t\\t\\treturn _value;\\n\\t\\t}\\n\\t\\telse if (_type == uint8(1)) {\\n\\t\\t\\t_tapBase(_value, msg.sender);\\n\\t\\t\\treturn _value;\\n\\t\\t}\\n\\t\\telse if (_type == uint8(2))\\n\\t\\t\\t_tapSimpleToken(_value, msg.sender);\\n\\t\\treturn (0);\\n\\t}\\n\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to take funds from vault purely from profit made from yearn yield\\n\\t * @param _tapValue Amount of funds to take\\n\\t * @param _recipient recipient of funds (always distributor)\\n\\t */\\n\\tfunction _tapOnlyProfit(uint256 _tapValue, address _recipient) internal {\\n\\t\\tuint256 fee = FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).getVariableFee(_tapValue, _tapValue);\\n\\t\\tuint256 finalTapValue = _tapValue + _tapValue * fee / TOTAL_SHARES;\\n\\t\\trequire(_shareValue(finalTapValue) <= profit(), \\\"Not enough profit to cover epoch\\\");\\n\\t\\tvault.safeTransfer(_recipient, _tapValue);\\n\\t\\tvault.safeTransfer(ApeRegistry(apeRegistry).treasury(), _tapValue * fee / TOTAL_SHARES);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to take funds from vault by deducting a part from profits\\n\\t * @param _tapValue Amount of funds to take\\n\\t * @param _recipient recipient of funds (always distributor)\\n\\t */\\n\\tfunction _tapBase(uint256 _tapValue, address _recipient) internal {\\n\\t\\tuint256 underlyingTapValue = _shareValue(_tapValue);\\n\\t\\tuint256 profit_ = profit();\\n\\t\\tuint256 fee = FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).getVariableFee(profit_, underlyingTapValue);\\n\\t\\tuint256 finalTapValue = underlyingTapValue + underlyingTapValue * fee / TOTAL_SHARES;\\n\\t\\tif (finalTapValue > profit_)\\n\\t\\t\\tunderlyingValue -= finalTapValue - profit_;\\n\\t\\tvault.transfer(_recipient, _tapValue);\\n\\t\\tvault.transfer(ApeRegistry(apeRegistry).treasury(), _tapValue * fee / TOTAL_SHARES);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to take funds simple token\\n\\t * @param _tapValue Amount of funds to take\\n\\t * @param _recipient recipient of funds (always distributor)\\n\\t */\\n\\tfunction _tapSimpleToken(uint256 _tapValue, address _recipient) internal {\\n\\t\\tuint256 feeAmount = _tapValue * FeeRegistry(ApeRegistry(apeRegistry).feeRegistry()).staticFee() / TOTAL_SHARES;\\n\\t\\tsimpleToken.transfer(_recipient, _tapValue);\\n\\t\\tsimpleToken.transfer(ApeRegistry(apeRegistry).treasury(), feeAmount);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to correct change the amount of underlying funds held by the ape Vault\\n\\t */\\n\\tfunction syncUnderlying() external onlyOwner {\\n\\t\\tunderlyingValue = _shareValue(vault.balanceOf(address(this)));\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to add the correct amount of funds from the router, only callable by router\\n\\t * @param _amount amount of undelrying funds to add\\n\\t */\\n\\tfunction addFunds(uint256 _amount) external onlyRouter {\\n\\t\\tunderlyingValue += _amount;\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to approve an admin to fund/finalise epochs from this vault to a specific circle\\n\\t * @param _circle Circle who will benefit from this vault\\n\\t * @param _admin address that can finalise epochs\\n\\t */\\n\\tfunction approveCircleAdmin(bytes32 _circle, address _admin) external onlyOwner {\\n\\t\\tApeDistributor(ApeRegistry(apeRegistry).distributor()).updateCircleAdmin(_circle, _admin);\\n\\t}\\n\\n\\t/**  \\n\\t * @notice\\n\\t * Used to update the allowance of a circle that the vault funds\\n\\t * @param _circle Circle who will benefit from this vault\\n\\t * @param _amount Max amount of funds available per epoch\\n\\t * @param _interval Seconds in between each epochs\\n\\t * @param _epochAmount Amount of epochs to fund (0 means you're at least funding one epoch)\\n\\t * If you want to stop funding a circle, set _amount to 0\\n\\t * @param _intervalStart Unix timestamp fromw hich epoch starts (block.timestamp if 0)\\n\\t */\\n\\tfunction updateAllowance(\\n\\t\\tbytes32 _circle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _interval,\\n\\t\\tuint256 _epochAmount,\\n\\t\\tuint256 _intervalStart\\n\\t\\t) external onlyOwner {\\n\\t\\tApeDistributor(\\n\\t\\t\\tApeRegistry(apeRegistry).distributor()\\n\\t\\t).setAllowance(_circle, _token, _amount, _interval, _epochAmount, _intervalStart);\\n\\t}\\n}\",\"keccak256\":\"0x9cd8c5a055ea8627212441c68925888b13234ebb31b19c80606f88cffbce163f\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/ApeVaultFactory.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"./ApeVault.sol\\\";\\n\\ncontract ApeVaultFactory {\\n\\tmapping(address => bool) public vaultRegistry;\\n\\n\\taddress public yearnRegistry;\\n\\taddress public apeRegistry;\\n\\n\\tevent VaultCreated(address vault);\\n\\n\\tconstructor(address _reg, address _apeReg) {\\n\\t\\tapeRegistry = _apeReg;\\n\\t\\tyearnRegistry = _reg;\\n\\t}\\n\\n\\tfunction createApeVault(address _token, address _simpleToken) external {\\n\\t\\tApeVaultWrapper vault = new ApeVaultWrapper(apeRegistry, _token, yearnRegistry, _simpleToken);\\n\\t\\tvault.transferOwnership(msg.sender);\\n\\t\\tvaultRegistry[address(vault)] = true;\\n\\t\\temit VaultCreated(address(vault));\\n\\t}\\n}\",\"keccak256\":\"0x051755ef7a60daf095216633deed13089c6bd9587e6256753f338f9a6f3181ed\"},\"contracts/coordinape-protocol/contracts/ApeProtocol/wrapper/BaseWrapper.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct StrategyParams {\\n    uint256 performanceFee;\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 minDebtPerHarvest;\\n    uint256 maxDebtPerHarvest;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n}\\n\\ninterface VaultAPI is IERC20 {\\n    function name() external view returns (string calldata);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function apiVersion() external pure returns (string memory);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n    function deposit() external returns (uint256);\\n\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    function deposit(uint256 amount, address recipient) external returns (uint256);\\n\\n    // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n    function withdraw() external returns (uint256);\\n\\n    function withdraw(uint256 maxShares) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function depositLimit() external view returns (uint256);\\n\\n    function maxAvailableShares() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would increase this Strategy's borrow limit,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would like to pull back from the Strategy,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function debtOutstanding() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault expect this Strategy to return at the current\\n     * block, based on its present performance (since its last report). Can be\\n     * used to determine expectedReturn in your Strategy.\\n     */\\n    function expectedReturn() external view returns (uint256);\\n\\n    /**\\n     * This is the main contact point where the Strategy interacts with the\\n     * Vault. It is critical that this call is handled as intended by the\\n     * Strategy. Therefore, this function will be called by BaseStrategy to\\n     * make sure the integration is correct.\\n     */\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    /**\\n     * This function should only be used in the scenario where the Strategy is\\n     * being retired but no migration of the positions are possible, or in the\\n     * extreme scenario that the Strategy needs to be put into \\\"Emergency Exit\\\"\\n     * mode in order for it to exit as quickly as possible. The latter scenario\\n     * could be for any reason that is considered \\\"critical\\\" that the Strategy\\n     * exits its position as fast as possible, such as a sudden change in\\n     * market conditions leading to losses, or an imminent failure in an\\n     * external dependency.\\n     */\\n    function revokeStrategy() external;\\n\\n    /**\\n     * View the governance address of the Vault to assert privileged functions\\n     * can only be called by governance. The Strategy serves the Vault, so it\\n     * is subject to governance defined by the Vault.\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * View the management address of the Vault to assert privileged functions\\n     * can only be called by management. The Strategy serves the Vault, so it\\n     * is subject to management defined by the Vault.\\n     */\\n    function management() external view returns (address);\\n\\n    /**\\n     * View the guardian address of the Vault to assert privileged functions\\n     * can only be called by guardian. The Strategy serves the Vault, so it\\n     * is subject to guardian defined by the Vault.\\n     */\\n    function guardian() external view returns (address);\\n}\\n\\n\\ninterface RegistryAPI {\\n    function governance() external view returns (address);\\n\\n    function latestVault(address token) external view returns (address);\\n\\n    function numVaults(address token) external view returns (uint256);\\n\\n    function vaults(address token, uint256 deploymentId) external view returns (address);\\n}\\n\\n/**\\n * @title Yearn Base Wrapper\\n * @author yearn.finance\\n * @notice\\n *  BaseWrapper implements all of the required functionality to interoperate\\n *  closely with the Vault contract. This contract should be inherited and the\\n *  abstract methods implemented to adapt the Wrapper.\\n *  A good starting point to build a wrapper is https://github.com/yearn/brownie-wrapper-mix\\n *\\n */\\nabstract contract BaseWrapper {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token;\\n\\n    // Reduce number of external calls (SLOADs stay the same)\\n    VaultAPI[] private _cachedVaults;\\n\\n    RegistryAPI public registry;\\n\\n    // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\\n    uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\\n    // Sentinal values used to save gas on deposit/withdraw/migrate\\n    // NOTE: DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING\\n    uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\\n    uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\\n    uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\\n    // VaultsAPI.depositLimit is unlimited\\n    uint256 constant UNCAPPED_DEPOSITS = type(uint256).max;\\n\\n    constructor(address _token, address _registry) {\\n        // Recommended to use a token with a `Registry.latestVault(_token) != address(0)`\\n        token = IERC20(_token);\\n        // Recommended to use `v2.registry.ychad.eth`\\n        registry = RegistryAPI(_registry);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to update the yearn registry.\\n     * @param _registry The new _registry address.\\n     */\\n    function setRegistry(address _registry) external {\\n        require(msg.sender == registry.governance());\\n        // In case you want to override the registry instead of re-deploying\\n        registry = RegistryAPI(_registry);\\n        // Make sure there's no change in governance\\n        // NOTE: Also avoid bricking the wrapper from setting a bad registry\\n        require(msg.sender == registry.governance());\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the most revent vault for the token using the registry.\\n     * @return An instance of a VaultAPI\\n     */\\n    function bestVault() public view virtual returns (VaultAPI) {\\n        return VaultAPI(registry.latestVault(address(token)));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get all vaults from the registery for the token\\n     * @return An array containing instances of VaultAPI\\n     */\\n    function allVaults() public view virtual returns (VaultAPI[] memory) {\\n        uint256 cache_length = _cachedVaults.length;\\n        uint256 num_vaults = registry.numVaults(address(token));\\n\\n        // Use cached\\n        if (cache_length == num_vaults) {\\n            return _cachedVaults;\\n        }\\n\\n        VaultAPI[] memory vaults = new VaultAPI[](num_vaults);\\n\\n        for (uint256 vault_id = 0; vault_id < cache_length; vault_id++) {\\n            vaults[vault_id] = _cachedVaults[vault_id];\\n        }\\n\\n        for (uint256 vault_id = cache_length; vault_id < num_vaults; vault_id++) {\\n            vaults[vault_id] = VaultAPI(registry.vaults(address(token), vault_id));\\n        }\\n\\n        return vaults;\\n    }\\n\\n    function _updateVaultCache(VaultAPI[] memory vaults) internal {\\n        // NOTE: even though `registry` is update-able by Yearn, the intended behavior\\n        //       is that any future upgrades to the registry will replay the version\\n        //       history so that this cached value does not get out of date.\\n        if (vaults.length > _cachedVaults.length) {\\n            _cachedVaults = vaults;\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the balance of an account accross all the vaults for a token.\\n     *  @dev will be used to get the wrapper balance using totalVaultBalance(address(this)).\\n     *  @param account The address of the account.\\n     *  @return balance of token for the account accross all the vaults.\\n     */\\n    function totalVaultBalance(address account) public view returns (uint256 balance) {\\n        VaultAPI[] memory vaults = allVaults();\\n\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            balance = balance.add(vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals())));\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the TVL on the underlying vaults.\\n     *  @return assets the sum of all the assets managed by the underlying vaults.\\n     */\\n    function totalAssets() public view returns (uint256 assets) {\\n        VaultAPI[] memory vaults = allVaults();\\n\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            assets = assets.add(vaults[id].totalAssets());\\n        }\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        address receiver,\\n        uint256 amount, // if `MAX_UINT256`, just deposit everything\\n        bool pullFunds // If true, funds need to be pulled from `depositor` via `transferFrom`\\n    ) internal returns (uint256 deposited) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        if (pullFunds) {\\n            if (amount != DEPOSIT_EVERYTHING) {\\n                token.safeTransferFrom(depositor, address(this), amount);\\n            } else {\\n                token.safeTransferFrom(depositor, address(this), token.balanceOf(depositor));\\n            }\\n        }\\n\\n        if (token.allowance(address(this), address(_bestVault)) < amount) {\\n            token.safeApprove(address(_bestVault), 0); // Avoid issues with some tokens requiring 0\\n            token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\\n        }\\n\\n        // Depositing returns number of shares deposited\\n        // NOTE: Shortcut here is assuming the number of tokens deposited is equal to the\\n        //       number of shares credited, which helps avoid an occasional multiplication\\n        //       overflow if trying to adjust the number of shares by the share price.\\n        uint256 beforeBal = token.balanceOf(address(this));\\n        if (receiver != address(this)) {\\n            _bestVault.deposit(amount, receiver);\\n        } else if (amount != DEPOSIT_EVERYTHING) {\\n            _bestVault.deposit(amount);\\n        } else {\\n            _bestVault.deposit();\\n        }\\n\\n        uint256 afterBal = token.balanceOf(address(this));\\n        deposited = beforeBal.sub(afterBal);\\n        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\\n        // Issue a refund if not everything was deposited\\n        if (depositor != address(this) && afterBal > 0) token.safeTransfer(depositor, afterBal);\\n    }\\n\\n    function _withdraw(\\n        address sender,\\n        address receiver,\\n        uint256 amount, // if `MAX_UINT256`, just withdraw everything\\n        bool withdrawFromBest // If true, also withdraw from `_bestVault`\\n    ) internal returns (uint256 withdrawn) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        VaultAPI[] memory vaults = allVaults();\\n        _updateVaultCache(vaults);\\n\\n        // NOTE: This loop will attempt to withdraw from each Vault in `allVaults` that `sender`\\n        //       is deposited in, up to `amount` tokens. The withdraw action can be expensive,\\n        //       so it if there is a denial of service issue in withdrawing, the downstream usage\\n        //       of this wrapper contract must give an alternative method of withdrawing using\\n        //       this function so that `amount` is less than the full amount requested to withdraw\\n        //       (e.g. \\\"piece-wise withdrawals\\\"), leading to less loop iterations such that the\\n        //       DoS issue is mitigated (at a tradeoff of requiring more txns from the end user).\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            if (!withdrawFromBest && vaults[id] == _bestVault) {\\n                continue; // Don't withdraw from the best\\n            }\\n\\n            // Start with the total shares that `sender` has\\n            uint256 availableShares = vaults[id].balanceOf(sender);\\n\\n            // Restrict by the allowance that `sender` has to this contract\\n            // NOTE: No need for allowance check if `sender` is this contract\\n            if (sender != address(this)) {\\n                availableShares = Math.min(availableShares, vaults[id].allowance(sender, address(this)));\\n            }\\n\\n            // Limit by maximum withdrawal size from each vault\\n            availableShares = Math.min(availableShares, vaults[id].maxAvailableShares());\\n\\n            if (availableShares > 0) {\\n                // Intermediate step to move shares to this contract before withdrawing\\n                // NOTE: No need for share transfer if this contract is `sender`\\n                if (sender != address(this)) vaults[id].transferFrom(sender, address(this), availableShares);\\n\\n                if (amount != WITHDRAW_EVERYTHING) {\\n                    // Compute amount to withdraw fully to satisfy the request\\n                    uint256 estimatedShares =\\n                        amount\\n                            .sub(withdrawn) // NOTE: Changes every iteration\\n                            .mul(10**uint256(vaults[id].decimals()))\\n                            .div(vaults[id].pricePerShare()); // NOTE: Every Vault is different\\n\\n                    // Limit amount to withdraw to the maximum made available to this contract\\n                    // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\\n                    // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\\n                    if (estimatedShares > 0 && estimatedShares < availableShares) {\\n                        withdrawn = withdrawn.add(vaults[id].withdraw(estimatedShares));\\n                    } else {\\n                        withdrawn = withdrawn.add(vaults[id].withdraw(availableShares));\\n                    }\\n                } else {\\n                    withdrawn = withdrawn.add(vaults[id].withdraw());\\n                }\\n\\n                // Check if we have fully satisfied the request\\n                // NOTE: use `amount = WITHDRAW_EVERYTHING` for withdrawing everything\\n                if (amount <= withdrawn) break; // withdrawn as much as we needed\\n            }\\n        }\\n\\n        // If we have extra, deposit back into `_bestVault` for `sender`\\n        // NOTE: Invariant is `withdrawn <= amount`\\n        if (withdrawn > amount && withdrawn.sub(amount) > _bestVault.pricePerShare().div(10**_bestVault.decimals())) {\\n            // Don't forget to approve the deposit\\n            if (token.allowance(address(this), address(_bestVault)) < withdrawn.sub(amount)) {\\n                token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\\n            }\\n\\n            _bestVault.deposit(withdrawn.sub(amount), sender);\\n            withdrawn = amount;\\n        }\\n\\n        // `receiver` now has `withdrawn` tokens as balance\\n        if (receiver != address(this)) token.safeTransfer(receiver, withdrawn);\\n    }\\n\\n    function _migrate(address account) internal returns (uint256) {\\n        return _migrate(account, MIGRATE_EVERYTHING);\\n    }\\n\\n    function _migrate(address account, uint256 amount) internal returns (uint256) {\\n        // NOTE: In practice, it was discovered that <50 was the maximum we've see for this variance\\n        return _migrate(account, amount, 0);\\n    }\\n\\n    function _migrate(\\n        address account,\\n        uint256 amount,\\n        uint256 maxMigrationLoss\\n    ) internal returns (uint256 migrated) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        // NOTE: Only override if we aren't migrating everything\\n        uint256 _depositLimit = _bestVault.depositLimit();\\n        uint256 _totalAssets = _bestVault.totalAssets();\\n        if (_depositLimit <= _totalAssets) return 0; // Nothing to migrate (not a failure)\\n\\n        uint256 _amount = amount;\\n        if (_depositLimit < UNCAPPED_DEPOSITS && _amount < WITHDRAW_EVERYTHING) {\\n            // Can only deposit up to this amount\\n            uint256 _depositLeft = _depositLimit.sub(_totalAssets);\\n            if (_amount > _depositLeft) _amount = _depositLeft;\\n        }\\n\\n        if (_amount > 0) {\\n            // NOTE: `false` = don't withdraw from `_bestVault`\\n            uint256 withdrawn = _withdraw(account, address(this), _amount, false);\\n            if (withdrawn == 0) return 0; // Nothing to migrate (not a failure)\\n\\n            // NOTE: `false` = don't do `transferFrom` because it's already local\\n            migrated = _deposit(address(this), account, withdrawn, false);\\n            // NOTE: Due to the precision loss of certain calculations, there is a small inefficency\\n            //       on how migrations are calculated, and this could lead to a DoS issue. Hence, this\\n            //       value is made to be configurable to allow the user to specify how much is acceptable\\n            require(withdrawn.sub(migrated) <= maxMigrationLoss);\\n        } // else: nothing to migrate! (not a failure)\\n    }\\n}\",\"keccak256\":\"0x7c420094b590261868e4af753fe2cd7f013db80b36a89be1e74eaae67190b3f1\"},\"contracts/coordinape-protocol/interfaces/IApeVault.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\ninterface IApeVault {\\n\\tfunction tap(uint256 _tapValue, uint256 _slippage, uint8 _type) external;\\n}\",\"keccak256\":\"0x3f167ed48d15bae7d34857fa07fa4990690ef71e9b87f28fac26bb076ce041ba\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e65760003560e01c80631333cdda146100eb5780632a9eda11146101135780632c5eaf211461012657806347d116dd1461013b578063499ab9761461015b5780634c84c5a11461016e57806364b84bc314610181578063715018a6146101a25780638da5cb5b146101aa5780639749b368146101b2578063a91ee0dc146101c5578063abeb6997146101d8578063b5872958146101eb578063bb8703171461020b578063c4d252f51461021e578063c63c4e9b14610231578063f2fde38b1461023a578063fc50baf51461024d575b600080fd5b6100fe6100f936600461185a565b610260565b60405190151581526020015b60405180910390f35b6100fe61012136600461185a565b610275565b6101396101343660046117a8565b61028b565b005b60045461014e906001600160a01b031681565b60405161010a91906118e0565b610139610169366004611701565b6103ec565b6100fe61017c36600461185a565b610798565b61019461018f366004611768565b6107ae565b60405190815260200161010a565b610139610c97565b61014e610cd2565b6101396101c036600461185a565b610ce1565b6101396101d33660046116c9565b610d05565b6101396101e63660046117a8565b610d46565b6101946101f936600461185a565b60016020526000908152604090205481565b60035461014e906001600160a01b031681565b61013961022c36600461185a565b610ecb565b61019460025481565b6101396102483660046116c9565b610f9d565b61013961025b3660046116c9565b61103d565b60009081526001602052604090205442101590565b6000908152600160208190526040909120541490565b33610294610cd2565b6001600160a01b0316146102c35760405162461bcd60e51b81526004016102ba90611a08565b60405180910390fd5b60006102d28787878787611165565b600081815260016020526040902054909150156103315760405162461bcd60e51b815260206004820181905260248201527f54696d654c6f636b3a2043616c6c20616c7265616479207363686564756c656460448201526064016102ba565b6002548210156103825760405162461bcd60e51b815260206004820152601c60248201527b54696d654c6f636b3a20496e73756666696369656e742064656c617960201b60448201526064016102ba565b60025461038f9042611b06565b60008281526001602052604090819020919091555181907f66dcc96f6c92c7919714879a908fc29b273e363ba3d409c0c6db86984ee3c480906103db908a908a908a908a90899061193c565b60405180910390a250505050505050565b600354604051630e177dc760e41b81526000916001600160a01b03169063e177dc709061041d9087906004016118e0565b60206040518083038186803b15801561043557600080fd5b505afa158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d91906116e5565b90506001600160a01b0381166104955760405162461bcd60e51b81526004016102ba90611a3d565b60048054604051632a43df5b60e11b81526001600160a01b0390911691635487beb6916104c4913391016118e0565b60206040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610514919061183e565b6105305760405162461bcd60e51b81526004016102ba90611ab8565b846001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561056957600080fd5b505afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a191906116e5565b6001600160a01b0316816001600160a01b0316146105d15760405162461bcd60e51b81526004016102ba90611a74565b811561065b57604051627b8a6760e11b81526001600160a01b0382169062f714ce906106039086908a90600401611aef565b602060405180830381600087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190611872565b506106dd565b60405163a9059cbb60e01b81526001600160a01b0382169063a9059cbb906106899089908790600401611975565b602060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db919061183e565b505b806001600160a01b03167ff77bbfe58c940481be63e90da9212a6bdeed12dd1d4b10fa66aebcdc94bc55e1826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074157600080fd5b505afa158015610755573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077991906116e5565b85604051610788929190611975565b60405180910390a2505050505050565b6000908152600160208190526040909120541190565b600354604051630e177dc760e41b815260009182916001600160a01b039091169063e177dc70906107e39087906004016118e0565b60206040518083038186803b1580156107fb57600080fd5b505afa15801561080f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083391906116e5565b90506001600160a01b03811661085b5760405162461bcd60e51b81526004016102ba90611a3d565b60048054604051632a43df5b60e11b81526001600160a01b0390911691635487beb69161088a918991016118e0565b60206040518083038186803b1580156108a257600080fd5b505afa1580156108b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108da919061183e565b6108f65760405162461bcd60e51b81526004016102ba90611ab8565b846001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092f57600080fd5b505afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096791906116e5565b6001600160a01b0316816001600160a01b0316146109975760405162461bcd60e51b81526004016102ba90611a74565b6109ac6001600160a01b0385163330866111a1565b604051636eb1769f60e11b815283906001600160a01b0386169063dd62ed3e906109dc90309086906004016118f4565b60206040518083038186803b1580156109f457600080fd5b505afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190611872565b1015610a5d57610a476001600160a01b038516826000611212565b610a5d6001600160a01b03851682600019611212565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190610a8c9030906004016118e0565b60206040518083038186803b158015610aa457600080fd5b505afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc9190611872565b90506000826001600160a01b0316636e553f6586896040518363ffffffff1660e01b8152600401610b0e929190611aef565b602060405180830381600087803b158015610b2857600080fd5b505af1158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b609190611872565b90506000866001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610b9091906118e0565b60206040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be09190611872565b9050610bec8184611b1e565b60405163be99970560e01b8152600481018290529095506001600160a01b0389169063be99970590602401600060405180830381600087803b158015610c3157600080fd5b505af1158015610c45573d6000803e3d6000fd5b50505050876001600160a01b03167fad1daa3a6c907d761416fa1a6d153dc1e6ff1d19b354bbfcbb848e79cecf91898884604051610c84929190611975565b60405180910390a2505050509392505050565b33610ca0610cd2565b6001600160a01b031614610cc65760405162461bcd60e51b81526004016102ba90611a08565b610cd06000611329565b565b6000546001600160a01b031690565b333014610d005760405162461bcd60e51b81526004016102ba906119c1565b600255565b333014610d245760405162461bcd60e51b81526004016102ba906119c1565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b33610d4f610cd2565b6001600160a01b031614610d755760405162461bcd60e51b81526004016102ba90611a08565b6000610d848787878787611165565b9050610d8f81610260565b610de55760405162461bcd60e51b815260206004820152602160248201527f54696d654c6f636b3a204e6f7420726561647920666f7220657865637574696f6044820152603760f91b60648201526084016102ba565b610dee81610275565b15610e385760405162461bcd60e51b815260206004820152601a602482015279151a5b59531bd8dace88105b1c9958591e48195e1958dd5d195960321b60448201526064016102ba565b831580610e495750610e4984610275565b610ea55760405162461bcd60e51b815260206004820152602760248201527f54696d654c6f636b3a205072656465636573736f722063616c6c206e6f7420656044820152661e1958dd5d195960ca1b60648201526084016102ba565b610eb181888888611379565b600090815260016020819052604090912055505050505050565b33610ed4610cd2565b6001600160a01b031614610efa5760405162461bcd60e51b81526004016102ba90611a08565b610f0381610798565b610f4f5760405162461bcd60e51b815260206004820152601d60248201527f54696d654c6f636b3a2043616c6c206973206e6f742070656e64696e6700000060448201526064016102ba565b60008181526001602052604080822091909155517fab2af3494bc00bd4aa34e08bd246e5c402d3ee4856c19f5461ce47a6d57423e190610f929083815260200190565b60405180910390a150565b33610fa6610cd2565b6001600160a01b031614610fcc5760405162461bcd60e51b81526004016102ba90611a08565b6001600160a01b0381166110315760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ba565b61103a81611329565b50565b33611046610cd2565b6001600160a01b03161461106c5760405162461bcd60e51b81526004016102ba90611a08565b6040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a08231906110a29030906004016118e0565b60206040518083038186803b1580156110ba57600080fd5b505afa1580156110ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f29190611872565b6040518363ffffffff1660e01b815260040161110f929190611975565b602060405180830381600087803b15801561112957600080fd5b505af115801561113d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611161919061183e565b5050565b6000858585858560405160200161118095949392919061193c565b60405160208183030381529060405280519060200120905095945050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261120c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261147d565b50505050565b80158061129a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061124890309086906004016118f4565b60206040518083038186803b15801561126057600080fd5b505afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190611872565b155b6113055760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016102ba565b6113248363095ea7b360e01b84846040516024016111d5929190611975565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000836001600160a01b031683836040516113959291906118b4565b6000604051808303816000865af19150503d80600081146113d2576040519150601f19603f3d011682016040523d82523d6000602084013e6113d7565b606091505b505090508061143a5760405162461bcd60e51b815260206004820152602960248201527f54696d656c6f636b3a20756e6465726c79696e67207472616e73616374696f6e604482015268081c995d995c9d195960ba1b60648201526084016102ba565b847fc08872e260006100fd2e00a3ba4c617fdb250f802f99384d55c10097dc1d048785858560405161146e9392919061190e565b60405180910390a25050505050565b60006114d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661154f9092919063ffffffff16565b80519091501561132457808060200190518101906114f0919061183e565b6113245760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102ba565b606061155e8484600085611568565b90505b9392505050565b6060824710156115c95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102ba565b843b6116175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ba565b600080866001600160a01b0316858760405161163391906118c4565b60006040518083038185875af1925050503d8060008114611670576040519150601f19603f3d011682016040523d82523d6000602084013e611675565b606091505b5091509150611685828286611690565b979650505050505050565b6060831561169f575081611561565b8251156116af5782518084602001fd5b8160405162461bcd60e51b81526004016102ba919061198e565b6000602082840312156116da578081fd5b813561156181611b77565b6000602082840312156116f6578081fd5b815161156181611b77565b600080600080600060a08688031215611718578081fd5b853561172381611b77565b9450602086013561173381611b77565b9350604086013561174381611b77565b925060608601359150608086013561175a81611b8c565b809150509295509295909350565b60008060006060848603121561177c578283fd5b833561178781611b77565b9250602084013561179781611b77565b929592945050506040919091013590565b60008060008060008060a087890312156117c0578081fd5b86356117cb81611b77565b955060208701356001600160401b03808211156117e6578283fd5b818901915089601f8301126117f9578283fd5b813581811115611807578384fd5b8a6020828501011115611818578384fd5b979a60209290920199509697604081013597506060810135965060800135945092505050565b60006020828403121561184f578081fd5b815161156181611b8c565b60006020828403121561186b578081fd5b5035919050565b600060208284031215611883578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b600082516118d6818460208701611b35565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0384168152604060208201819052600090611933908301848661188a565b95945050505050565b6001600160a01b0386168152608060208201819052600090611961908301868861188a565b604083019490945250606001529392505050565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526119ad816040850160208701611b35565b601f01601f19169190910160400192915050565b60208082526027908201527f54696d654c6f636b3a2043616c6c6572206973206e6f7420636f6e74726163746040820152661034ba39b2b63360c91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f417065526f757465723a204e6f207661756c7420666f7220746f6b656e000000604082015260600190565b60208082526024908201527f417065526f757465723a20796561726e205661756c74206e6f74206964656e746040820152631a58d85b60e21b606082015260800190565b6020808252601f908201527f417065526f757465723a205661756c7420646f6573206e6f7420657869737400604082015260600190565b9182526001600160a01b0316602082015260400190565b60008219821115611b1957611b19611b61565b500190565b600082821015611b3057611b30611b61565b500390565b60005b83811015611b50578181015183820152602001611b38565b8381111561120c5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461103a57600080fd5b801515811461103a57600080fdfea26469706673582212207368be99e35033d6954291dd8767ca9724acf306e9b1b9c110d3f5529f6357c164736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRegistry(address)": {
        "params": {
          "_registry": "The new _registry address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRegistry(address)": {
        "notice": "Used to update the yearn registry."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol:ApeRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5976,
        "contract": "contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol:ApeRouter",
        "label": "timestamps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5978,
        "contract": "contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol:ApeRouter",
        "label": "minDelay",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4973,
        "contract": "contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol:ApeRouter",
        "label": "yearnRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4975,
        "contract": "contracts/coordinape-protocol/contracts/ApeProtocol/ApeRouter.sol:ApeRouter",
        "label": "apeVaultFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}